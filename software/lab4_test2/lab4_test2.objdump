
lab4_test2.elf:     file format elf32-littlenios2
lab4_test2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001424 memsz 0x00001424 flags r-x
    LOAD off    0x00002444 vaddr 0x00011444 paddr 0x000115d4 align 2**12
         filesz 0x00000190 memsz 0x00000190 flags rw-
    LOAD off    0x00002764 vaddr 0x00011764 paddr 0x00011764 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000128c  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  0001140c  0001140c  0000240c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000190  00011444  000115d4  00002444  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  00011764  00011764  00002764  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00011888  00011888  000025d4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000458  00000000  00000000  000025f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005999  00000000  00000000  00002a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001fb9  00000000  00000000  000083e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000223b  00000000  00000000  0000a3a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000608  00000000  00000000  0000c5e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000019c3  00000000  00000000  0000cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000019d3  00000000  00000000  0000e5ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000ff80  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000350  00000000  00000000  0000ff90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000119be  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000119c1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000119c4  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000119c5  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000119c6  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000119cf  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000119d8  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  000119e1  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  000119f3  2**0
                  CONTENTS, READONLY
 26 .jdi          00005009  00000000  00000000  00011a2e  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003e15d  00000000  00000000  00016a37  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
0001140c l    d  .rodata	00000000 .rodata
00011444 l    d  .rwdata	00000000 .rwdata
00011764 l    d  .bss	00000000 .bss
00011888 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab4_test2_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010578 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00011444 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011524 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00011274 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00011784 g     O .bss	00000004 alt_instruction_exception_handler
00010fc4 g     F .text	0000002c alt_main
0001023c g     F .text	00000014 led_write
00011788 g     O .bss	00000100 alt_irq
000115d4 g       *ABS*	00000000 __flash_rwdata_start
0001052c g     F .text	0000004c printf
000101bc g     F .text	00000080 sys_timer_isr
000115b8 g     O .rwdata	00000004 jtag_uart
00011360 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00011168 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011770 g     O .bss	00000004 errno
0001177c g     O .bss	00000004 alt_argv
000195a8 g       *ABS*	00000000 _gp
00011550 g     O .rwdata	00000030 alt_fd_list
000112e8 g     F .text	00000074 alt_find_dev
00011368 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00011080 g     F .text	0000005c altera_avalon_jtag_uart_read
000104f0 g     F .text	0000003c _printf_r
00010d50 g     F .text	00000064 .hidden __udivsi3
000115bc g     O .rwdata	00000004 alt_max_fd
00010e50 g     F .text	00000094 alt_irq_register
000115ac g     O .rwdata	00000004 _global_impure_ptr
00011888 g       *ABS*	00000000 __bss_end
00010e0c g     F .text	00000044 alt_getchar
00011774 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00011580 g     O .rwdata	00000028 alt_dev_null
00011270 g     F .text	00000004 alt_dcache_flush_all
000115d4 g       *ABS*	00000000 __ram_rwdata_end
00010284 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
000115c0 g     O .rwdata	00000008 alt_dev_list
00010ff0 g     F .text	00000060 write
00011444 g       *ABS*	00000000 __ram_rodata_end
00011768 g     O .bss	00000001 led
00010db4 g     F .text	00000058 .hidden __umodsi3
00011888 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
000110dc g     F .text	00000034 altera_avalon_jtag_uart_write
000105e4 g     F .text	0000052c ___vfprintf_internal_r
00010180 g     F .text	0000003c _start
0001176c g     O .bss	00000004 level
00011070 g     F .text	00000010 alt_sys_init
00011118 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
000104c8 g     F .text	00000028 .hidden __mulsi3
00011444 g       *ABS*	00000000 __ram_rwdata_start
0001140c g       *ABS*	00000000 __ram_rodata_start
000111c0 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
000113dc g     F .text	00000030 memcmp
00011888 g       *ABS*	00000000 __alt_stack_base
000115a8 g     O .rwdata	00000004 TAPS
0001127c g     F .text	0000006c alt_dev_llist_insert
00010b2c g     F .text	000000b8 __sfvwrite_small_dev
00011764 g       *ABS*	00000000 __bss_start
0001036c g     F .text	0000015c main
00011778 g     O .bss	00000004 alt_envp
000115d0 g     O .rwdata	00000004 alt_errno
00010c58 g     F .text	00000084 .hidden __divsi3
0001140c g       *ABS*	00000000 __flash_rodata_start
00011050 g     F .text	00000020 alt_irq_init
00010c00 g     F .text	00000058 _write_r
000115b0 g     O .rwdata	00000004 _impure_ptr
00011780 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00011764 g     O .bss	00000001 pwm
000115c8 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011110 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
000102f4 g     F .text	00000078 LPF
000115d4 g       *ABS*	00000000 _edata
00011888 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00010cdc g     F .text	00000074 .hidden __modsi3
00011218 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010250 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
0001112c g     F .text	00000020 alt_up_accelerometer_spi_read
0001114c g     F .text	0000001c alt_up_accelerometer_spi_write
00010be4 g     F .text	0000001c strlen
0001135c g     F .text	00000004 alt_icache_flush_all
000115b4 g     O .rwdata	00000004 alt_priority_mask
00010b10 g     F .text	0000001c __vfprintf_internal
00010ee4 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	8405e204 	addi	r16,r16,6024

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a07717 	ldw	r2,-32292(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a56a14 	ori	gp,gp,38312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	1085d914 	ori	r2,r2,5988

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c62214 	ori	r3,r3,6280

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	0010ee40 	call	10ee4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	0010fc40 	call	10fc4 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840004 	addi	r2,r2,4096
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a07117 	ldw	r2,-32316(gp)
   101cc:	d1606f07 	ldb	r5,-32324(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c40804 	addi	r3,r3,4128
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
alt_u8 led;
int level;
int TAPS = 128;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a07003 	ldbu	r2,-32320(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a07003 	ldbu	r2,-32320(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a07003 	ldbu	r2,-32320(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a06f03 	ldbu	r2,-32324(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0206f05 	stb	zero,-32324(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a06f05 	stb	r2,-32324(gp)
   10238:	f800283a 	ret

0001023c <led_write>:
alt_u8 led;
int level;
int TAPS = 128;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   1023c:	008000b4 	movhi	r2,2
   10240:	21003fcc 	andi	r4,r4,255
   10244:	10840804 	addi	r2,r2,4128
   10248:	11000035 	stwio	r4,0(r2)
   1024c:	f800283a 	ret

00010250 <convert_read>:
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
   10250:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10254:	2005d1ba 	srai	r2,r4,6
    * level = (acc_read >> 1) & 0x1f;
   10258:	2009d07a 	srai	r4,r4,1
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   1025c:	10c001cc 	andi	r3,r2,7
   10260:	00800204 	movi	r2,8
   10264:	10cfc83a 	sub	r7,r2,r3
   10268:	11ce983a 	sll	r7,r2,r7
   1026c:	10c5d83a 	sra	r2,r2,r3
    * level = (acc_read >> 1) & 0x1f;
   10270:	210007cc 	andi	r4,r4,31
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10274:	3884b03a 	or	r2,r7,r2
   10278:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   1027c:	29000015 	stw	r4,0(r5)
   10280:	f800283a 	ret

00010284 <timer_init>:
        pwm++;
    }

}

void timer_init(void * isr) {
   10284:	defffe04 	addi	sp,sp,-8
   10288:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   1028c:	040000b4 	movhi	r16,2
        pwm++;
    }

}

void timer_init(void * isr) {
   10290:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10294:	84040104 	addi	r16,r16,4100
   10298:	008000c4 	movi	r2,3
   1029c:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   102a0:	00c000b4 	movhi	r3,2
   102a4:	0005883a 	mov	r2,zero
   102a8:	18c40004 	addi	r3,r3,4096
   102ac:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   102b0:	00c000b4 	movhi	r3,2
   102b4:	18c40204 	addi	r3,r3,4104
   102b8:	01424004 	movi	r5,2304
   102bc:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   102c0:	00c000b4 	movhi	r3,2
   102c4:	18c40304 	addi	r3,r3,4108
   102c8:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   102cc:	200d883a 	mov	r6,r4
   102d0:	000b883a 	mov	r5,zero
   102d4:	01000044 	movi	r4,1
   102d8:	0010e500 	call	10e50 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   102dc:	008001c4 	movi	r2,7
   102e0:	80800035 	stwio	r2,0(r16)

}
   102e4:	dfc00117 	ldw	ra,4(sp)
   102e8:	dc000017 	ldw	r16,0(sp)
   102ec:	dec00204 	addi	sp,sp,8
   102f0:	f800283a 	ret

000102f4 <LPF>:

alt_32 LPF(alt_32 acc_read [TAPS], alt_32 coeffs [TAPS]){
   102f4:	defffa04 	addi	sp,sp,-24
   102f8:	dd000415 	stw	r20,16(sp)
	alt_32 avg = 0;
	for (int i = 0; i < TAPS; i++){
   102fc:	d5200017 	ldw	r20,-32768(gp)
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

alt_32 LPF(alt_32 acc_read [TAPS], alt_32 coeffs [TAPS]){
   10300:	dcc00315 	stw	r19,12(sp)
   10304:	dc800215 	stw	r18,8(sp)
   10308:	dc400115 	stw	r17,4(sp)
   1030c:	dc000015 	stw	r16,0(sp)
   10310:	dfc00515 	stw	ra,20(sp)
   10314:	2025883a 	mov	r18,r4
   10318:	2827883a 	mov	r19,r5
	alt_32 avg = 0;
	for (int i = 0; i < TAPS; i++){
   1031c:	0023883a 	mov	r17,zero
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

alt_32 LPF(alt_32 acc_read [TAPS], alt_32 coeffs [TAPS]){
	alt_32 avg = 0;
   10320:	0021883a 	mov	r16,zero
	for (int i = 0; i < TAPS; i++){
   10324:	8d00080e 	bge	r17,r20,10348 <LPF+0x54>
		avg += acc_read[i]*coeffs[i];
   10328:	99400017 	ldw	r5,0(r19)
   1032c:	91000017 	ldw	r4,0(r18)

}

alt_32 LPF(alt_32 acc_read [TAPS], alt_32 coeffs [TAPS]){
	alt_32 avg = 0;
	for (int i = 0; i < TAPS; i++){
   10330:	8c400044 	addi	r17,r17,1
   10334:	94800104 	addi	r18,r18,4
		avg += acc_read[i]*coeffs[i];
   10338:	00104c80 	call	104c8 <__mulsi3>
   1033c:	80a1883a 	add	r16,r16,r2
   10340:	9cc00104 	addi	r19,r19,4
   10344:	003ff706 	br	10324 <__alt_data_end+0xffff0324>
	}
	//alt_printf("average data: %f\n", sum);
	return avg >> 7;
}
   10348:	8005d1fa 	srai	r2,r16,7
   1034c:	dfc00517 	ldw	ra,20(sp)
   10350:	dd000417 	ldw	r20,16(sp)
   10354:	dcc00317 	ldw	r19,12(sp)
   10358:	dc800217 	ldw	r18,8(sp)
   1035c:	dc400117 	ldw	r17,4(sp)
   10360:	dc000017 	ldw	r16,0(sp)
   10364:	dec00604 	addi	sp,sp,24
   10368:	f800283a 	ret

0001036c <main>:

int main() {
	int i = 0;
    alt_32 x_read [TAPS];
   1036c:	d0e00017 	ldw	r3,-32768(gp)
	}
	//alt_printf("average data: %f\n", sum);
	return avg >> 7;
}

int main() {
   10370:	defff704 	addi	sp,sp,-36
   10374:	df000715 	stw	fp,28(sp)
	int i = 0;
    alt_32 x_read [TAPS];
   10378:	18c5883a 	add	r2,r3,r3
   1037c:	1085883a 	add	r2,r2,r2
   10380:	10800184 	addi	r2,r2,6
   10384:	1004d0ba 	srli	r2,r2,2
	}
	//alt_printf("average data: %f\n", sum);
	return avg >> 7;
}

int main() {
   10388:	dcc00315 	stw	r19,12(sp)
   1038c:	dc400115 	stw	r17,4(sp)
	int i = 0;
    alt_32 x_read [TAPS];
   10390:	1085883a 	add	r2,r2,r2
   10394:	1085883a 	add	r2,r2,r2
	}
	//alt_printf("average data: %f\n", sum);
	return avg >> 7;
}

int main() {
   10398:	dfc00815 	stw	ra,32(sp)
   1039c:	dd800615 	stw	r22,24(sp)
   103a0:	dd400515 	stw	r21,20(sp)
   103a4:	dd000415 	stw	r20,16(sp)
   103a8:	dc800215 	stw	r18,8(sp)
   103ac:	dc000015 	stw	r16,0(sp)
   103b0:	df000704 	addi	fp,sp,28
	int i = 0;
    alt_32 x_read [TAPS];
   103b4:	d8b7c83a 	sub	sp,sp,r2
   103b8:	d823883a 	mov	r17,sp
    alt_32 coeffs [TAPS];
   103bc:	d8b7c83a 	sub	sp,sp,r2
   103c0:	d827883a 	mov	r19,sp
   103c4:	d809883a 	mov	r4,sp
   103c8:	880b883a 	mov	r5,r17

    for (int i = 0; i<TAPS; i++){
   103cc:	0005883a 	mov	r2,zero
    	coeffs[i] = 1;
   103d0:	01800044 	movi	r6,1
int main() {
	int i = 0;
    alt_32 x_read [TAPS];
    alt_32 coeffs [TAPS];

    for (int i = 0; i<TAPS; i++){
   103d4:	10c0060e 	bge	r2,r3,103f0 <main+0x84>
    	coeffs[i] = 1;
   103d8:	21800015 	stw	r6,0(r4)
    	x_read[i] = 0;
   103dc:	28000015 	stw	zero,0(r5)
int main() {
	int i = 0;
    alt_32 x_read [TAPS];
    alt_32 coeffs [TAPS];

    for (int i = 0; i<TAPS; i++){
   103e0:	10800044 	addi	r2,r2,1
   103e4:	21000104 	addi	r4,r4,4
   103e8:	29400104 	addi	r5,r5,4
   103ec:	003ff906 	br	103d4 <__alt_data_end+0xffff03d4>
    	coeffs[i] = 1;
    	x_read[i] = 0;
    }

    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   103f0:	01000074 	movhi	r4,1
   103f4:	21050304 	addi	r4,r4,5132
   103f8:	00111100 	call	11110 <alt_up_accelerometer_spi_open_dev>
   103fc:	1029883a 	mov	r20,r2
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   10400:	10002426 	beq	r2,zero,10494 <main+0x128>
        return 1;
    }

    char c;
  	c = alt_getchar();
   10404:	0010e0c0 	call	10e0c <alt_getchar>
   	printf("you entered: %c \n",c);
   10408:	11403fcc 	andi	r5,r2,255
   1040c:	2940201c 	xori	r5,r5,128
   10410:	01000074 	movhi	r4,1
   10414:	297fe004 	addi	r5,r5,-128
   10418:	21050904 	addi	r4,r4,5156
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
        return 1;
    }

    char c;
  	c = alt_getchar();
   1041c:	1025883a 	mov	r18,r2
   	printf("you entered: %c \n",c);
   10420:	001052c0 	call	1052c <printf>

    timer_init(sys_timer_isr);
   10424:	01000074 	movhi	r4,1
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read[i]);
        alt_32 avg = LPF(x_read, coeffs);

        alt_32 val;

        if(c == '1'){
   10428:	94803fcc 	andi	r18,r18,255

    char c;
  	c = alt_getchar();
   	printf("you entered: %c \n",c);

    timer_init(sys_timer_isr);
   1042c:	21006f04 	addi	r4,r4,444
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read[i]);
        alt_32 avg = LPF(x_read, coeffs);

        alt_32 val;

        if(c == '1'){
   10430:	9480201c 	xori	r18,r18,128

    char c;
  	c = alt_getchar();
   	printf("you entered: %c \n",c);

    timer_init(sys_timer_isr);
   10434:	00102840 	call	10284 <timer_init>
	//alt_printf("average data: %f\n", sum);
	return avg >> 7;
}

int main() {
	int i = 0;
   10438:	002d883a 	mov	r22,zero
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read[i]);
        alt_32 avg = LPF(x_read, coeffs);

        alt_32 val;

        if(c == '1'){
   1043c:	94bfe004 	addi	r18,r18,-128
   10440:	05400c44 	movi	r21,49
   	printf("you entered: %c \n",c);

    timer_init(sys_timer_isr);
    while (1) {

    	if (i == TAPS){
   10444:	d0a00017 	ldw	r2,-32768(gp)
   10448:	b080011e 	bne	r22,r2,10450 <main+0xe4>
    		i = 0;
   1044c:	002d883a 	mov	r22,zero
    	}
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read[i]);
   10450:	b5a1883a 	add	r16,r22,r22
   10454:	8421883a 	add	r16,r16,r16
   10458:	8c21883a 	add	r16,r17,r16
   1045c:	800b883a 	mov	r5,r16
   10460:	a009883a 	mov	r4,r20
   10464:	00111680 	call	11168 <alt_up_accelerometer_spi_read_x_axis>
        alt_32 avg = LPF(x_read, coeffs);
   10468:	980b883a 	mov	r5,r19
   1046c:	8809883a 	mov	r4,r17
   10470:	00102f40 	call	102f4 <LPF>

        alt_32 val;

        if(c == '1'){
   10474:	95400126 	beq	r18,r21,1047c <main+0x110>
        	val = avg;
        }
        else{
        	val = x_read[i];
   10478:	80800017 	ldw	r2,0(r16)
        }

         //alt_printf("raw data: %x\naverage data: %d\n", x_read, avg);
        convert_read(val, & level, & led);
   1047c:	d1a07004 	addi	r6,gp,-32320
   10480:	d1607104 	addi	r5,gp,-32316
   10484:	1009883a 	mov	r4,r2
   10488:	00102500 	call	10250 <convert_read>
        i++;
   1048c:	b5800044 	addi	r22,r22,1
    }
   10490:	003fec06 	br	10444 <__alt_data_end+0xffff0444>

    return 0;
}
   10494:	00800044 	movi	r2,1
   10498:	e6fff904 	addi	sp,fp,-28
   1049c:	dfc00817 	ldw	ra,32(sp)
   104a0:	df000717 	ldw	fp,28(sp)
   104a4:	dd800617 	ldw	r22,24(sp)
   104a8:	dd400517 	ldw	r21,20(sp)
   104ac:	dd000417 	ldw	r20,16(sp)
   104b0:	dcc00317 	ldw	r19,12(sp)
   104b4:	dc800217 	ldw	r18,8(sp)
   104b8:	dc400117 	ldw	r17,4(sp)
   104bc:	dc000017 	ldw	r16,0(sp)
   104c0:	dec00904 	addi	sp,sp,36
   104c4:	f800283a 	ret

000104c8 <__mulsi3>:
   104c8:	0005883a 	mov	r2,zero
   104cc:	20000726 	beq	r4,zero,104ec <__mulsi3+0x24>
   104d0:	20c0004c 	andi	r3,r4,1
   104d4:	2008d07a 	srli	r4,r4,1
   104d8:	18000126 	beq	r3,zero,104e0 <__mulsi3+0x18>
   104dc:	1145883a 	add	r2,r2,r5
   104e0:	294b883a 	add	r5,r5,r5
   104e4:	203ffa1e 	bne	r4,zero,104d0 <__alt_data_end+0xffff04d0>
   104e8:	f800283a 	ret
   104ec:	f800283a 	ret

000104f0 <_printf_r>:
   104f0:	defffd04 	addi	sp,sp,-12
   104f4:	dfc00015 	stw	ra,0(sp)
   104f8:	d9800115 	stw	r6,4(sp)
   104fc:	d9c00215 	stw	r7,8(sp)
   10500:	20c00217 	ldw	r3,8(r4)
   10504:	01800074 	movhi	r6,1
   10508:	3182cb04 	addi	r6,r6,2860
   1050c:	19800115 	stw	r6,4(r3)
   10510:	280d883a 	mov	r6,r5
   10514:	21400217 	ldw	r5,8(r4)
   10518:	d9c00104 	addi	r7,sp,4
   1051c:	00105e40 	call	105e4 <___vfprintf_internal_r>
   10520:	dfc00017 	ldw	ra,0(sp)
   10524:	dec00304 	addi	sp,sp,12
   10528:	f800283a 	ret

0001052c <printf>:
   1052c:	defffc04 	addi	sp,sp,-16
   10530:	dfc00015 	stw	ra,0(sp)
   10534:	d9400115 	stw	r5,4(sp)
   10538:	d9800215 	stw	r6,8(sp)
   1053c:	d9c00315 	stw	r7,12(sp)
   10540:	00800074 	movhi	r2,1
   10544:	10856c04 	addi	r2,r2,5552
   10548:	10800017 	ldw	r2,0(r2)
   1054c:	01400074 	movhi	r5,1
   10550:	2942cb04 	addi	r5,r5,2860
   10554:	10c00217 	ldw	r3,8(r2)
   10558:	d9800104 	addi	r6,sp,4
   1055c:	19400115 	stw	r5,4(r3)
   10560:	200b883a 	mov	r5,r4
   10564:	11000217 	ldw	r4,8(r2)
   10568:	0010b100 	call	10b10 <__vfprintf_internal>
   1056c:	dfc00017 	ldw	ra,0(sp)
   10570:	dec00404 	addi	sp,sp,16
   10574:	f800283a 	ret

00010578 <print_repeat>:
   10578:	defffb04 	addi	sp,sp,-20
   1057c:	dc800315 	stw	r18,12(sp)
   10580:	dc400215 	stw	r17,8(sp)
   10584:	dc000115 	stw	r16,4(sp)
   10588:	dfc00415 	stw	ra,16(sp)
   1058c:	2025883a 	mov	r18,r4
   10590:	2823883a 	mov	r17,r5
   10594:	d9800005 	stb	r6,0(sp)
   10598:	3821883a 	mov	r16,r7
   1059c:	04000a0e 	bge	zero,r16,105c8 <print_repeat+0x50>
   105a0:	88800117 	ldw	r2,4(r17)
   105a4:	01c00044 	movi	r7,1
   105a8:	d80d883a 	mov	r6,sp
   105ac:	880b883a 	mov	r5,r17
   105b0:	9009883a 	mov	r4,r18
   105b4:	103ee83a 	callr	r2
   105b8:	843fffc4 	addi	r16,r16,-1
   105bc:	103ff726 	beq	r2,zero,1059c <__alt_data_end+0xffff059c>
   105c0:	00bfffc4 	movi	r2,-1
   105c4:	00000106 	br	105cc <print_repeat+0x54>
   105c8:	0005883a 	mov	r2,zero
   105cc:	dfc00417 	ldw	ra,16(sp)
   105d0:	dc800317 	ldw	r18,12(sp)
   105d4:	dc400217 	ldw	r17,8(sp)
   105d8:	dc000117 	ldw	r16,4(sp)
   105dc:	dec00504 	addi	sp,sp,20
   105e0:	f800283a 	ret

000105e4 <___vfprintf_internal_r>:
   105e4:	deffe504 	addi	sp,sp,-108
   105e8:	d8c00804 	addi	r3,sp,32
   105ec:	ddc01815 	stw	r23,96(sp)
   105f0:	dd801715 	stw	r22,92(sp)
   105f4:	dd401615 	stw	r21,88(sp)
   105f8:	dd001515 	stw	r20,84(sp)
   105fc:	dcc01415 	stw	r19,80(sp)
   10600:	dc801315 	stw	r18,76(sp)
   10604:	dc401215 	stw	r17,72(sp)
   10608:	dc001115 	stw	r16,68(sp)
   1060c:	dfc01a15 	stw	ra,104(sp)
   10610:	df001915 	stw	fp,100(sp)
   10614:	2029883a 	mov	r20,r4
   10618:	2823883a 	mov	r17,r5
   1061c:	382d883a 	mov	r22,r7
   10620:	d9800f15 	stw	r6,60(sp)
   10624:	0021883a 	mov	r16,zero
   10628:	d8000e15 	stw	zero,56(sp)
   1062c:	d8000a15 	stw	zero,40(sp)
   10630:	002b883a 	mov	r21,zero
   10634:	0027883a 	mov	r19,zero
   10638:	0025883a 	mov	r18,zero
   1063c:	d8000c15 	stw	zero,48(sp)
   10640:	d8000b15 	stw	zero,44(sp)
   10644:	002f883a 	mov	r23,zero
   10648:	d8c00915 	stw	r3,36(sp)
   1064c:	d8c00f17 	ldw	r3,60(sp)
   10650:	19000003 	ldbu	r4,0(r3)
   10654:	20803fcc 	andi	r2,r4,255
   10658:	1080201c 	xori	r2,r2,128
   1065c:	10bfe004 	addi	r2,r2,-128
   10660:	10011e26 	beq	r2,zero,10adc <___vfprintf_internal_r+0x4f8>
   10664:	00c00044 	movi	r3,1
   10668:	b8c01426 	beq	r23,r3,106bc <___vfprintf_internal_r+0xd8>
   1066c:	1dc00216 	blt	r3,r23,10678 <___vfprintf_internal_r+0x94>
   10670:	b8000626 	beq	r23,zero,1068c <___vfprintf_internal_r+0xa8>
   10674:	00011506 	br	10acc <___vfprintf_internal_r+0x4e8>
   10678:	01400084 	movi	r5,2
   1067c:	b9401d26 	beq	r23,r5,106f4 <___vfprintf_internal_r+0x110>
   10680:	014000c4 	movi	r5,3
   10684:	b9402b26 	beq	r23,r5,10734 <___vfprintf_internal_r+0x150>
   10688:	00011006 	br	10acc <___vfprintf_internal_r+0x4e8>
   1068c:	01400944 	movi	r5,37
   10690:	1140fc26 	beq	r2,r5,10a84 <___vfprintf_internal_r+0x4a0>
   10694:	88800117 	ldw	r2,4(r17)
   10698:	d9000005 	stb	r4,0(sp)
   1069c:	01c00044 	movi	r7,1
   106a0:	d80d883a 	mov	r6,sp
   106a4:	880b883a 	mov	r5,r17
   106a8:	a009883a 	mov	r4,r20
   106ac:	103ee83a 	callr	r2
   106b0:	1000d81e 	bne	r2,zero,10a14 <___vfprintf_internal_r+0x430>
   106b4:	84000044 	addi	r16,r16,1
   106b8:	00010406 	br	10acc <___vfprintf_internal_r+0x4e8>
   106bc:	01400c04 	movi	r5,48
   106c0:	1140fa26 	beq	r2,r5,10aac <___vfprintf_internal_r+0x4c8>
   106c4:	01400944 	movi	r5,37
   106c8:	11400a1e 	bne	r2,r5,106f4 <___vfprintf_internal_r+0x110>
   106cc:	d8800005 	stb	r2,0(sp)
   106d0:	88800117 	ldw	r2,4(r17)
   106d4:	b80f883a 	mov	r7,r23
   106d8:	d80d883a 	mov	r6,sp
   106dc:	880b883a 	mov	r5,r17
   106e0:	a009883a 	mov	r4,r20
   106e4:	103ee83a 	callr	r2
   106e8:	1000ca1e 	bne	r2,zero,10a14 <___vfprintf_internal_r+0x430>
   106ec:	84000044 	addi	r16,r16,1
   106f0:	0000f506 	br	10ac8 <___vfprintf_internal_r+0x4e4>
   106f4:	25fff404 	addi	r23,r4,-48
   106f8:	bdc03fcc 	andi	r23,r23,255
   106fc:	00c00244 	movi	r3,9
   10700:	1dc00936 	bltu	r3,r23,10728 <___vfprintf_internal_r+0x144>
   10704:	00bfffc4 	movi	r2,-1
   10708:	90800426 	beq	r18,r2,1071c <___vfprintf_internal_r+0x138>
   1070c:	01400284 	movi	r5,10
   10710:	9009883a 	mov	r4,r18
   10714:	00104c80 	call	104c8 <__mulsi3>
   10718:	00000106 	br	10720 <___vfprintf_internal_r+0x13c>
   1071c:	0005883a 	mov	r2,zero
   10720:	b8a5883a 	add	r18,r23,r2
   10724:	0000e206 	br	10ab0 <___vfprintf_internal_r+0x4cc>
   10728:	01400b84 	movi	r5,46
   1072c:	1140e426 	beq	r2,r5,10ac0 <___vfprintf_internal_r+0x4dc>
   10730:	05c00084 	movi	r23,2
   10734:	213ff404 	addi	r4,r4,-48
   10738:	27003fcc 	andi	fp,r4,255
   1073c:	00c00244 	movi	r3,9
   10740:	1f000936 	bltu	r3,fp,10768 <___vfprintf_internal_r+0x184>
   10744:	00bfffc4 	movi	r2,-1
   10748:	98800426 	beq	r19,r2,1075c <___vfprintf_internal_r+0x178>
   1074c:	01400284 	movi	r5,10
   10750:	9809883a 	mov	r4,r19
   10754:	00104c80 	call	104c8 <__mulsi3>
   10758:	00000106 	br	10760 <___vfprintf_internal_r+0x17c>
   1075c:	0005883a 	mov	r2,zero
   10760:	e0a7883a 	add	r19,fp,r2
   10764:	0000d906 	br	10acc <___vfprintf_internal_r+0x4e8>
   10768:	00c01b04 	movi	r3,108
   1076c:	10c0d226 	beq	r2,r3,10ab8 <___vfprintf_internal_r+0x4d4>
   10770:	013fffc4 	movi	r4,-1
   10774:	99000226 	beq	r19,r4,10780 <___vfprintf_internal_r+0x19c>
   10778:	d8000b15 	stw	zero,44(sp)
   1077c:	00000106 	br	10784 <___vfprintf_internal_r+0x1a0>
   10780:	04c00044 	movi	r19,1
   10784:	01001a44 	movi	r4,105
   10788:	11001626 	beq	r2,r4,107e4 <___vfprintf_internal_r+0x200>
   1078c:	20800916 	blt	r4,r2,107b4 <___vfprintf_internal_r+0x1d0>
   10790:	010018c4 	movi	r4,99
   10794:	11008826 	beq	r2,r4,109b8 <___vfprintf_internal_r+0x3d4>
   10798:	01001904 	movi	r4,100
   1079c:	11001126 	beq	r2,r4,107e4 <___vfprintf_internal_r+0x200>
   107a0:	01001604 	movi	r4,88
   107a4:	1100c81e 	bne	r2,r4,10ac8 <___vfprintf_internal_r+0x4e4>
   107a8:	00c00044 	movi	r3,1
   107ac:	d8c00e15 	stw	r3,56(sp)
   107b0:	00001506 	br	10808 <___vfprintf_internal_r+0x224>
   107b4:	01001cc4 	movi	r4,115
   107b8:	11009826 	beq	r2,r4,10a1c <___vfprintf_internal_r+0x438>
   107bc:	20800416 	blt	r4,r2,107d0 <___vfprintf_internal_r+0x1ec>
   107c0:	01001bc4 	movi	r4,111
   107c4:	1100c01e 	bne	r2,r4,10ac8 <___vfprintf_internal_r+0x4e4>
   107c8:	05400204 	movi	r21,8
   107cc:	00000f06 	br	1080c <___vfprintf_internal_r+0x228>
   107d0:	01001d44 	movi	r4,117
   107d4:	11000d26 	beq	r2,r4,1080c <___vfprintf_internal_r+0x228>
   107d8:	01001e04 	movi	r4,120
   107dc:	11000a26 	beq	r2,r4,10808 <___vfprintf_internal_r+0x224>
   107e0:	0000b906 	br	10ac8 <___vfprintf_internal_r+0x4e4>
   107e4:	d8c00a17 	ldw	r3,40(sp)
   107e8:	b7000104 	addi	fp,r22,4
   107ec:	18000726 	beq	r3,zero,1080c <___vfprintf_internal_r+0x228>
   107f0:	df000d15 	stw	fp,52(sp)
   107f4:	b5c00017 	ldw	r23,0(r22)
   107f8:	b800080e 	bge	r23,zero,1081c <___vfprintf_internal_r+0x238>
   107fc:	05efc83a 	sub	r23,zero,r23
   10800:	02400044 	movi	r9,1
   10804:	00000606 	br	10820 <___vfprintf_internal_r+0x23c>
   10808:	05400404 	movi	r21,16
   1080c:	b0c00104 	addi	r3,r22,4
   10810:	d8c00d15 	stw	r3,52(sp)
   10814:	b5c00017 	ldw	r23,0(r22)
   10818:	d8000a15 	stw	zero,40(sp)
   1081c:	0013883a 	mov	r9,zero
   10820:	d839883a 	mov	fp,sp
   10824:	b8001726 	beq	r23,zero,10884 <___vfprintf_internal_r+0x2a0>
   10828:	a80b883a 	mov	r5,r21
   1082c:	b809883a 	mov	r4,r23
   10830:	da401015 	stw	r9,64(sp)
   10834:	0010d500 	call	10d50 <__udivsi3>
   10838:	a80b883a 	mov	r5,r21
   1083c:	1009883a 	mov	r4,r2
   10840:	102d883a 	mov	r22,r2
   10844:	00104c80 	call	104c8 <__mulsi3>
   10848:	b885c83a 	sub	r2,r23,r2
   1084c:	00c00244 	movi	r3,9
   10850:	da401017 	ldw	r9,64(sp)
   10854:	18800216 	blt	r3,r2,10860 <___vfprintf_internal_r+0x27c>
   10858:	10800c04 	addi	r2,r2,48
   1085c:	00000506 	br	10874 <___vfprintf_internal_r+0x290>
   10860:	d8c00e17 	ldw	r3,56(sp)
   10864:	18000226 	beq	r3,zero,10870 <___vfprintf_internal_r+0x28c>
   10868:	10800dc4 	addi	r2,r2,55
   1086c:	00000106 	br	10874 <___vfprintf_internal_r+0x290>
   10870:	108015c4 	addi	r2,r2,87
   10874:	e0800005 	stb	r2,0(fp)
   10878:	b02f883a 	mov	r23,r22
   1087c:	e7000044 	addi	fp,fp,1
   10880:	003fe806 	br	10824 <__alt_data_end+0xffff0824>
   10884:	e6efc83a 	sub	r23,fp,sp
   10888:	9dc5c83a 	sub	r2,r19,r23
   1088c:	0080090e 	bge	zero,r2,108b4 <___vfprintf_internal_r+0x2d0>
   10890:	e085883a 	add	r2,fp,r2
   10894:	01400c04 	movi	r5,48
   10898:	d8c00917 	ldw	r3,36(sp)
   1089c:	e009883a 	mov	r4,fp
   108a0:	e0c0032e 	bgeu	fp,r3,108b0 <___vfprintf_internal_r+0x2cc>
   108a4:	e7000044 	addi	fp,fp,1
   108a8:	21400005 	stb	r5,0(r4)
   108ac:	e0bffa1e 	bne	fp,r2,10898 <__alt_data_end+0xffff0898>
   108b0:	e6efc83a 	sub	r23,fp,sp
   108b4:	d8c00b17 	ldw	r3,44(sp)
   108b8:	4dd1883a 	add	r8,r9,r23
   108bc:	922dc83a 	sub	r22,r18,r8
   108c0:	18001626 	beq	r3,zero,1091c <___vfprintf_internal_r+0x338>
   108c4:	48000a26 	beq	r9,zero,108f0 <___vfprintf_internal_r+0x30c>
   108c8:	00800b44 	movi	r2,45
   108cc:	d8800805 	stb	r2,32(sp)
   108d0:	88800117 	ldw	r2,4(r17)
   108d4:	01c00044 	movi	r7,1
   108d8:	d9800804 	addi	r6,sp,32
   108dc:	880b883a 	mov	r5,r17
   108e0:	a009883a 	mov	r4,r20
   108e4:	103ee83a 	callr	r2
   108e8:	10004a1e 	bne	r2,zero,10a14 <___vfprintf_internal_r+0x430>
   108ec:	84000044 	addi	r16,r16,1
   108f0:	0580070e 	bge	zero,r22,10910 <___vfprintf_internal_r+0x32c>
   108f4:	b00f883a 	mov	r7,r22
   108f8:	01800c04 	movi	r6,48
   108fc:	880b883a 	mov	r5,r17
   10900:	a009883a 	mov	r4,r20
   10904:	00105780 	call	10578 <print_repeat>
   10908:	1000421e 	bne	r2,zero,10a14 <___vfprintf_internal_r+0x430>
   1090c:	85a1883a 	add	r16,r16,r22
   10910:	e02d883a 	mov	r22,fp
   10914:	bf2fc83a 	sub	r23,r23,fp
   10918:	00002006 	br	1099c <___vfprintf_internal_r+0x3b8>
   1091c:	0580090e 	bge	zero,r22,10944 <___vfprintf_internal_r+0x360>
   10920:	b00f883a 	mov	r7,r22
   10924:	01800804 	movi	r6,32
   10928:	880b883a 	mov	r5,r17
   1092c:	a009883a 	mov	r4,r20
   10930:	da401015 	stw	r9,64(sp)
   10934:	00105780 	call	10578 <print_repeat>
   10938:	da401017 	ldw	r9,64(sp)
   1093c:	1000351e 	bne	r2,zero,10a14 <___vfprintf_internal_r+0x430>
   10940:	85a1883a 	add	r16,r16,r22
   10944:	483ff226 	beq	r9,zero,10910 <__alt_data_end+0xffff0910>
   10948:	00800b44 	movi	r2,45
   1094c:	d8800805 	stb	r2,32(sp)
   10950:	88800117 	ldw	r2,4(r17)
   10954:	01c00044 	movi	r7,1
   10958:	d9800804 	addi	r6,sp,32
   1095c:	880b883a 	mov	r5,r17
   10960:	a009883a 	mov	r4,r20
   10964:	103ee83a 	callr	r2
   10968:	10002a1e 	bne	r2,zero,10a14 <___vfprintf_internal_r+0x430>
   1096c:	84000044 	addi	r16,r16,1
   10970:	003fe706 	br	10910 <__alt_data_end+0xffff0910>
   10974:	b5bfffc4 	addi	r22,r22,-1
   10978:	b0800003 	ldbu	r2,0(r22)
   1097c:	01c00044 	movi	r7,1
   10980:	d9800804 	addi	r6,sp,32
   10984:	d8800805 	stb	r2,32(sp)
   10988:	88800117 	ldw	r2,4(r17)
   1098c:	880b883a 	mov	r5,r17
   10990:	a009883a 	mov	r4,r20
   10994:	103ee83a 	callr	r2
   10998:	10001e1e 	bne	r2,zero,10a14 <___vfprintf_internal_r+0x430>
   1099c:	8585c83a 	sub	r2,r16,r22
   109a0:	b5c9883a 	add	r4,r22,r23
   109a4:	e085883a 	add	r2,fp,r2
   109a8:	013ff216 	blt	zero,r4,10974 <__alt_data_end+0xffff0974>
   109ac:	1021883a 	mov	r16,r2
   109b0:	dd800d17 	ldw	r22,52(sp)
   109b4:	00004406 	br	10ac8 <___vfprintf_internal_r+0x4e4>
   109b8:	00800044 	movi	r2,1
   109bc:	1480080e 	bge	r2,r18,109e0 <___vfprintf_internal_r+0x3fc>
   109c0:	95ffffc4 	addi	r23,r18,-1
   109c4:	b80f883a 	mov	r7,r23
   109c8:	01800804 	movi	r6,32
   109cc:	880b883a 	mov	r5,r17
   109d0:	a009883a 	mov	r4,r20
   109d4:	00105780 	call	10578 <print_repeat>
   109d8:	10000e1e 	bne	r2,zero,10a14 <___vfprintf_internal_r+0x430>
   109dc:	85e1883a 	add	r16,r16,r23
   109e0:	b0800017 	ldw	r2,0(r22)
   109e4:	01c00044 	movi	r7,1
   109e8:	d80d883a 	mov	r6,sp
   109ec:	d8800005 	stb	r2,0(sp)
   109f0:	88800117 	ldw	r2,4(r17)
   109f4:	880b883a 	mov	r5,r17
   109f8:	a009883a 	mov	r4,r20
   109fc:	b5c00104 	addi	r23,r22,4
   10a00:	103ee83a 	callr	r2
   10a04:	1000031e 	bne	r2,zero,10a14 <___vfprintf_internal_r+0x430>
   10a08:	84000044 	addi	r16,r16,1
   10a0c:	b82d883a 	mov	r22,r23
   10a10:	00002d06 	br	10ac8 <___vfprintf_internal_r+0x4e4>
   10a14:	00bfffc4 	movi	r2,-1
   10a18:	00003106 	br	10ae0 <___vfprintf_internal_r+0x4fc>
   10a1c:	b5c00017 	ldw	r23,0(r22)
   10a20:	b7000104 	addi	fp,r22,4
   10a24:	b809883a 	mov	r4,r23
   10a28:	0010be40 	call	10be4 <strlen>
   10a2c:	9091c83a 	sub	r8,r18,r2
   10a30:	102d883a 	mov	r22,r2
   10a34:	0200090e 	bge	zero,r8,10a5c <___vfprintf_internal_r+0x478>
   10a38:	400f883a 	mov	r7,r8
   10a3c:	01800804 	movi	r6,32
   10a40:	880b883a 	mov	r5,r17
   10a44:	a009883a 	mov	r4,r20
   10a48:	da001015 	stw	r8,64(sp)
   10a4c:	00105780 	call	10578 <print_repeat>
   10a50:	da001017 	ldw	r8,64(sp)
   10a54:	103fef1e 	bne	r2,zero,10a14 <__alt_data_end+0xffff0a14>
   10a58:	8221883a 	add	r16,r16,r8
   10a5c:	88800117 	ldw	r2,4(r17)
   10a60:	b00f883a 	mov	r7,r22
   10a64:	b80d883a 	mov	r6,r23
   10a68:	880b883a 	mov	r5,r17
   10a6c:	a009883a 	mov	r4,r20
   10a70:	103ee83a 	callr	r2
   10a74:	103fe71e 	bne	r2,zero,10a14 <__alt_data_end+0xffff0a14>
   10a78:	85a1883a 	add	r16,r16,r22
   10a7c:	e02d883a 	mov	r22,fp
   10a80:	00001106 	br	10ac8 <___vfprintf_internal_r+0x4e4>
   10a84:	00c00044 	movi	r3,1
   10a88:	04ffffc4 	movi	r19,-1
   10a8c:	d8000e15 	stw	zero,56(sp)
   10a90:	d8c00a15 	stw	r3,40(sp)
   10a94:	05400284 	movi	r21,10
   10a98:	9825883a 	mov	r18,r19
   10a9c:	d8000c15 	stw	zero,48(sp)
   10aa0:	d8000b15 	stw	zero,44(sp)
   10aa4:	182f883a 	mov	r23,r3
   10aa8:	00000806 	br	10acc <___vfprintf_internal_r+0x4e8>
   10aac:	ddc00b15 	stw	r23,44(sp)
   10ab0:	05c00084 	movi	r23,2
   10ab4:	00000506 	br	10acc <___vfprintf_internal_r+0x4e8>
   10ab8:	00c00044 	movi	r3,1
   10abc:	d8c00c15 	stw	r3,48(sp)
   10ac0:	05c000c4 	movi	r23,3
   10ac4:	00000106 	br	10acc <___vfprintf_internal_r+0x4e8>
   10ac8:	002f883a 	mov	r23,zero
   10acc:	d8c00f17 	ldw	r3,60(sp)
   10ad0:	18c00044 	addi	r3,r3,1
   10ad4:	d8c00f15 	stw	r3,60(sp)
   10ad8:	003edc06 	br	1064c <__alt_data_end+0xffff064c>
   10adc:	8005883a 	mov	r2,r16
   10ae0:	dfc01a17 	ldw	ra,104(sp)
   10ae4:	df001917 	ldw	fp,100(sp)
   10ae8:	ddc01817 	ldw	r23,96(sp)
   10aec:	dd801717 	ldw	r22,92(sp)
   10af0:	dd401617 	ldw	r21,88(sp)
   10af4:	dd001517 	ldw	r20,84(sp)
   10af8:	dcc01417 	ldw	r19,80(sp)
   10afc:	dc801317 	ldw	r18,76(sp)
   10b00:	dc401217 	ldw	r17,72(sp)
   10b04:	dc001117 	ldw	r16,68(sp)
   10b08:	dec01b04 	addi	sp,sp,108
   10b0c:	f800283a 	ret

00010b10 <__vfprintf_internal>:
   10b10:	00800074 	movhi	r2,1
   10b14:	10856c04 	addi	r2,r2,5552
   10b18:	300f883a 	mov	r7,r6
   10b1c:	280d883a 	mov	r6,r5
   10b20:	200b883a 	mov	r5,r4
   10b24:	11000017 	ldw	r4,0(r2)
   10b28:	00105e41 	jmpi	105e4 <___vfprintf_internal_r>

00010b2c <__sfvwrite_small_dev>:
   10b2c:	2880000b 	ldhu	r2,0(r5)
   10b30:	1080020c 	andi	r2,r2,8
   10b34:	10002126 	beq	r2,zero,10bbc <__sfvwrite_small_dev+0x90>
   10b38:	2880008f 	ldh	r2,2(r5)
   10b3c:	defffa04 	addi	sp,sp,-24
   10b40:	dc000015 	stw	r16,0(sp)
   10b44:	dfc00515 	stw	ra,20(sp)
   10b48:	dd000415 	stw	r20,16(sp)
   10b4c:	dcc00315 	stw	r19,12(sp)
   10b50:	dc800215 	stw	r18,8(sp)
   10b54:	dc400115 	stw	r17,4(sp)
   10b58:	2821883a 	mov	r16,r5
   10b5c:	10001216 	blt	r2,zero,10ba8 <__sfvwrite_small_dev+0x7c>
   10b60:	2027883a 	mov	r19,r4
   10b64:	3025883a 	mov	r18,r6
   10b68:	3823883a 	mov	r17,r7
   10b6c:	05010004 	movi	r20,1024
   10b70:	04400b0e 	bge	zero,r17,10ba0 <__sfvwrite_small_dev+0x74>
   10b74:	880f883a 	mov	r7,r17
   10b78:	a440010e 	bge	r20,r17,10b80 <__sfvwrite_small_dev+0x54>
   10b7c:	01c10004 	movi	r7,1024
   10b80:	8140008f 	ldh	r5,2(r16)
   10b84:	900d883a 	mov	r6,r18
   10b88:	9809883a 	mov	r4,r19
   10b8c:	0010c000 	call	10c00 <_write_r>
   10b90:	0080050e 	bge	zero,r2,10ba8 <__sfvwrite_small_dev+0x7c>
   10b94:	88a3c83a 	sub	r17,r17,r2
   10b98:	90a5883a 	add	r18,r18,r2
   10b9c:	003ff406 	br	10b70 <__alt_data_end+0xffff0b70>
   10ba0:	0005883a 	mov	r2,zero
   10ba4:	00000706 	br	10bc4 <__sfvwrite_small_dev+0x98>
   10ba8:	8080000b 	ldhu	r2,0(r16)
   10bac:	10801014 	ori	r2,r2,64
   10bb0:	8080000d 	sth	r2,0(r16)
   10bb4:	00bfffc4 	movi	r2,-1
   10bb8:	00000206 	br	10bc4 <__sfvwrite_small_dev+0x98>
   10bbc:	00bfffc4 	movi	r2,-1
   10bc0:	f800283a 	ret
   10bc4:	dfc00517 	ldw	ra,20(sp)
   10bc8:	dd000417 	ldw	r20,16(sp)
   10bcc:	dcc00317 	ldw	r19,12(sp)
   10bd0:	dc800217 	ldw	r18,8(sp)
   10bd4:	dc400117 	ldw	r17,4(sp)
   10bd8:	dc000017 	ldw	r16,0(sp)
   10bdc:	dec00604 	addi	sp,sp,24
   10be0:	f800283a 	ret

00010be4 <strlen>:
   10be4:	2005883a 	mov	r2,r4
   10be8:	10c00007 	ldb	r3,0(r2)
   10bec:	18000226 	beq	r3,zero,10bf8 <strlen+0x14>
   10bf0:	10800044 	addi	r2,r2,1
   10bf4:	003ffc06 	br	10be8 <__alt_data_end+0xffff0be8>
   10bf8:	1105c83a 	sub	r2,r2,r4
   10bfc:	f800283a 	ret

00010c00 <_write_r>:
   10c00:	defffd04 	addi	sp,sp,-12
   10c04:	dc000015 	stw	r16,0(sp)
   10c08:	04000074 	movhi	r16,1
   10c0c:	dc400115 	stw	r17,4(sp)
   10c10:	8405dc04 	addi	r16,r16,6000
   10c14:	2023883a 	mov	r17,r4
   10c18:	2809883a 	mov	r4,r5
   10c1c:	300b883a 	mov	r5,r6
   10c20:	380d883a 	mov	r6,r7
   10c24:	dfc00215 	stw	ra,8(sp)
   10c28:	80000015 	stw	zero,0(r16)
   10c2c:	0010ff00 	call	10ff0 <write>
   10c30:	00ffffc4 	movi	r3,-1
   10c34:	10c0031e 	bne	r2,r3,10c44 <_write_r+0x44>
   10c38:	80c00017 	ldw	r3,0(r16)
   10c3c:	18000126 	beq	r3,zero,10c44 <_write_r+0x44>
   10c40:	88c00015 	stw	r3,0(r17)
   10c44:	dfc00217 	ldw	ra,8(sp)
   10c48:	dc400117 	ldw	r17,4(sp)
   10c4c:	dc000017 	ldw	r16,0(sp)
   10c50:	dec00304 	addi	sp,sp,12
   10c54:	f800283a 	ret

00010c58 <__divsi3>:
   10c58:	20001b16 	blt	r4,zero,10cc8 <__divsi3+0x70>
   10c5c:	000f883a 	mov	r7,zero
   10c60:	28001616 	blt	r5,zero,10cbc <__divsi3+0x64>
   10c64:	200d883a 	mov	r6,r4
   10c68:	29001a2e 	bgeu	r5,r4,10cd4 <__divsi3+0x7c>
   10c6c:	00800804 	movi	r2,32
   10c70:	00c00044 	movi	r3,1
   10c74:	00000106 	br	10c7c <__divsi3+0x24>
   10c78:	10000d26 	beq	r2,zero,10cb0 <__divsi3+0x58>
   10c7c:	294b883a 	add	r5,r5,r5
   10c80:	10bfffc4 	addi	r2,r2,-1
   10c84:	18c7883a 	add	r3,r3,r3
   10c88:	293ffb36 	bltu	r5,r4,10c78 <__alt_data_end+0xffff0c78>
   10c8c:	0005883a 	mov	r2,zero
   10c90:	18000726 	beq	r3,zero,10cb0 <__divsi3+0x58>
   10c94:	0005883a 	mov	r2,zero
   10c98:	31400236 	bltu	r6,r5,10ca4 <__divsi3+0x4c>
   10c9c:	314dc83a 	sub	r6,r6,r5
   10ca0:	10c4b03a 	or	r2,r2,r3
   10ca4:	1806d07a 	srli	r3,r3,1
   10ca8:	280ad07a 	srli	r5,r5,1
   10cac:	183ffa1e 	bne	r3,zero,10c98 <__alt_data_end+0xffff0c98>
   10cb0:	38000126 	beq	r7,zero,10cb8 <__divsi3+0x60>
   10cb4:	0085c83a 	sub	r2,zero,r2
   10cb8:	f800283a 	ret
   10cbc:	014bc83a 	sub	r5,zero,r5
   10cc0:	39c0005c 	xori	r7,r7,1
   10cc4:	003fe706 	br	10c64 <__alt_data_end+0xffff0c64>
   10cc8:	0109c83a 	sub	r4,zero,r4
   10ccc:	01c00044 	movi	r7,1
   10cd0:	003fe306 	br	10c60 <__alt_data_end+0xffff0c60>
   10cd4:	00c00044 	movi	r3,1
   10cd8:	003fee06 	br	10c94 <__alt_data_end+0xffff0c94>

00010cdc <__modsi3>:
   10cdc:	20001716 	blt	r4,zero,10d3c <__modsi3+0x60>
   10ce0:	000f883a 	mov	r7,zero
   10ce4:	2005883a 	mov	r2,r4
   10ce8:	28001216 	blt	r5,zero,10d34 <__modsi3+0x58>
   10cec:	2900162e 	bgeu	r5,r4,10d48 <__modsi3+0x6c>
   10cf0:	01800804 	movi	r6,32
   10cf4:	00c00044 	movi	r3,1
   10cf8:	00000106 	br	10d00 <__modsi3+0x24>
   10cfc:	30000a26 	beq	r6,zero,10d28 <__modsi3+0x4c>
   10d00:	294b883a 	add	r5,r5,r5
   10d04:	31bfffc4 	addi	r6,r6,-1
   10d08:	18c7883a 	add	r3,r3,r3
   10d0c:	293ffb36 	bltu	r5,r4,10cfc <__alt_data_end+0xffff0cfc>
   10d10:	18000526 	beq	r3,zero,10d28 <__modsi3+0x4c>
   10d14:	1806d07a 	srli	r3,r3,1
   10d18:	11400136 	bltu	r2,r5,10d20 <__modsi3+0x44>
   10d1c:	1145c83a 	sub	r2,r2,r5
   10d20:	280ad07a 	srli	r5,r5,1
   10d24:	183ffb1e 	bne	r3,zero,10d14 <__alt_data_end+0xffff0d14>
   10d28:	38000126 	beq	r7,zero,10d30 <__modsi3+0x54>
   10d2c:	0085c83a 	sub	r2,zero,r2
   10d30:	f800283a 	ret
   10d34:	014bc83a 	sub	r5,zero,r5
   10d38:	003fec06 	br	10cec <__alt_data_end+0xffff0cec>
   10d3c:	0109c83a 	sub	r4,zero,r4
   10d40:	01c00044 	movi	r7,1
   10d44:	003fe706 	br	10ce4 <__alt_data_end+0xffff0ce4>
   10d48:	00c00044 	movi	r3,1
   10d4c:	003ff106 	br	10d14 <__alt_data_end+0xffff0d14>

00010d50 <__udivsi3>:
   10d50:	200d883a 	mov	r6,r4
   10d54:	2900152e 	bgeu	r5,r4,10dac <__udivsi3+0x5c>
   10d58:	28001416 	blt	r5,zero,10dac <__udivsi3+0x5c>
   10d5c:	00800804 	movi	r2,32
   10d60:	00c00044 	movi	r3,1
   10d64:	00000206 	br	10d70 <__udivsi3+0x20>
   10d68:	10000e26 	beq	r2,zero,10da4 <__udivsi3+0x54>
   10d6c:	28000516 	blt	r5,zero,10d84 <__udivsi3+0x34>
   10d70:	294b883a 	add	r5,r5,r5
   10d74:	10bfffc4 	addi	r2,r2,-1
   10d78:	18c7883a 	add	r3,r3,r3
   10d7c:	293ffa36 	bltu	r5,r4,10d68 <__alt_data_end+0xffff0d68>
   10d80:	18000826 	beq	r3,zero,10da4 <__udivsi3+0x54>
   10d84:	0005883a 	mov	r2,zero
   10d88:	31400236 	bltu	r6,r5,10d94 <__udivsi3+0x44>
   10d8c:	314dc83a 	sub	r6,r6,r5
   10d90:	10c4b03a 	or	r2,r2,r3
   10d94:	1806d07a 	srli	r3,r3,1
   10d98:	280ad07a 	srli	r5,r5,1
   10d9c:	183ffa1e 	bne	r3,zero,10d88 <__alt_data_end+0xffff0d88>
   10da0:	f800283a 	ret
   10da4:	0005883a 	mov	r2,zero
   10da8:	f800283a 	ret
   10dac:	00c00044 	movi	r3,1
   10db0:	003ff406 	br	10d84 <__alt_data_end+0xffff0d84>

00010db4 <__umodsi3>:
   10db4:	2005883a 	mov	r2,r4
   10db8:	2900122e 	bgeu	r5,r4,10e04 <__umodsi3+0x50>
   10dbc:	28001116 	blt	r5,zero,10e04 <__umodsi3+0x50>
   10dc0:	01800804 	movi	r6,32
   10dc4:	00c00044 	movi	r3,1
   10dc8:	00000206 	br	10dd4 <__umodsi3+0x20>
   10dcc:	30000c26 	beq	r6,zero,10e00 <__umodsi3+0x4c>
   10dd0:	28000516 	blt	r5,zero,10de8 <__umodsi3+0x34>
   10dd4:	294b883a 	add	r5,r5,r5
   10dd8:	31bfffc4 	addi	r6,r6,-1
   10ddc:	18c7883a 	add	r3,r3,r3
   10de0:	293ffa36 	bltu	r5,r4,10dcc <__alt_data_end+0xffff0dcc>
   10de4:	18000626 	beq	r3,zero,10e00 <__umodsi3+0x4c>
   10de8:	1806d07a 	srli	r3,r3,1
   10dec:	11400136 	bltu	r2,r5,10df4 <__umodsi3+0x40>
   10df0:	1145c83a 	sub	r2,r2,r5
   10df4:	280ad07a 	srli	r5,r5,1
   10df8:	183ffb1e 	bne	r3,zero,10de8 <__alt_data_end+0xffff0de8>
   10dfc:	f800283a 	ret
   10e00:	f800283a 	ret
   10e04:	00c00044 	movi	r3,1
   10e08:	003ff706 	br	10de8 <__alt_data_end+0xffff0de8>

00010e0c <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   10e0c:	00800074 	movhi	r2,1
   10e10:	10855404 	addi	r2,r2,5456
   10e14:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   10e18:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   10e1c:	01000074 	movhi	r4,1
   10e20:	01800044 	movi	r6,1
   10e24:	d80b883a 	mov	r5,sp
   10e28:	21056e04 	addi	r4,r4,5560
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
   10e2c:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
   10e30:	00110800 	call	11080 <altera_avalon_jtag_uart_read>
   10e34:	0080020e 	bge	zero,r2,10e40 <alt_getchar+0x34>
        return -1;
    }
    return c;
   10e38:	d8800007 	ldb	r2,0(sp)
   10e3c:	00000106 	br	10e44 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
   10e40:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
   10e44:	dfc00117 	ldw	ra,4(sp)
   10e48:	dec00204 	addi	sp,sp,8
   10e4c:	f800283a 	ret

00010e50 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10e50:	008007c4 	movi	r2,31
   10e54:	11002136 	bltu	r2,r4,10edc <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e58:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e5c:	00ffff84 	movi	r3,-2
   10e60:	38c4703a 	and	r2,r7,r3
   10e64:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   10e68:	200490fa 	slli	r2,r4,3
   10e6c:	02000074 	movhi	r8,1
   10e70:	4205e204 	addi	r8,r8,6024
   10e74:	4085883a 	add	r2,r8,r2
   10e78:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   10e7c:	11400115 	stw	r5,4(r2)
   10e80:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   10e84:	30000726 	beq	r6,zero,10ea4 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e88:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e8c:	28c6703a 	and	r3,r5,r3
   10e90:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   10e94:	d0e07317 	ldw	r3,-32308(gp)
   10e98:	1104983a 	sll	r2,r2,r4
   10e9c:	10c4b03a 	or	r2,r2,r3
   10ea0:	00000706 	br	10ec0 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10ea4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ea8:	28c6703a 	and	r3,r5,r3
   10eac:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   10eb0:	1104983a 	sll	r2,r2,r4
   10eb4:	d0e07317 	ldw	r3,-32308(gp)
   10eb8:	0084303a 	nor	r2,zero,r2
   10ebc:	10c4703a 	and	r2,r2,r3
   10ec0:	d0a07315 	stw	r2,-32308(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10ec4:	d0a07317 	ldw	r2,-32308(gp)
   10ec8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ecc:	2801703a 	wrctl	status,r5
   10ed0:	3801703a 	wrctl	status,r7
   10ed4:	0005883a 	mov	r2,zero
   10ed8:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   10edc:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   10ee0:	f800283a 	ret

00010ee4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10ee4:	deffff04 	addi	sp,sp,-4
   10ee8:	01000074 	movhi	r4,1
   10eec:	01400074 	movhi	r5,1
   10ef0:	dfc00015 	stw	ra,0(sp)
   10ef4:	21051104 	addi	r4,r4,5188
   10ef8:	29457504 	addi	r5,r5,5588

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10efc:	2140061e 	bne	r4,r5,10f18 <alt_load+0x34>
   10f00:	01000074 	movhi	r4,1
   10f04:	01400074 	movhi	r5,1
   10f08:	21000804 	addi	r4,r4,32
   10f0c:	29400804 	addi	r5,r5,32
   10f10:	2140121e 	bne	r4,r5,10f5c <alt_load+0x78>
   10f14:	00000b06 	br	10f44 <alt_load+0x60>
   10f18:	00c00074 	movhi	r3,1
   10f1c:	18c57504 	addi	r3,r3,5588
   10f20:	1907c83a 	sub	r3,r3,r4
   10f24:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10f28:	10fff526 	beq	r2,r3,10f00 <__alt_data_end+0xffff0f00>
    {
      *to++ = *from++;
   10f2c:	114f883a 	add	r7,r2,r5
   10f30:	39c00017 	ldw	r7,0(r7)
   10f34:	110d883a 	add	r6,r2,r4
   10f38:	10800104 	addi	r2,r2,4
   10f3c:	31c00015 	stw	r7,0(r6)
   10f40:	003ff906 	br	10f28 <__alt_data_end+0xffff0f28>
   10f44:	01000074 	movhi	r4,1
   10f48:	01400074 	movhi	r5,1
   10f4c:	21050304 	addi	r4,r4,5132
   10f50:	29450304 	addi	r5,r5,5132

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10f54:	2140101e 	bne	r4,r5,10f98 <alt_load+0xb4>
   10f58:	00000b06 	br	10f88 <alt_load+0xa4>
   10f5c:	00c00074 	movhi	r3,1
   10f60:	18c06004 	addi	r3,r3,384
   10f64:	1907c83a 	sub	r3,r3,r4
   10f68:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10f6c:	10fff526 	beq	r2,r3,10f44 <__alt_data_end+0xffff0f44>
    {
      *to++ = *from++;
   10f70:	114f883a 	add	r7,r2,r5
   10f74:	39c00017 	ldw	r7,0(r7)
   10f78:	110d883a 	add	r6,r2,r4
   10f7c:	10800104 	addi	r2,r2,4
   10f80:	31c00015 	stw	r7,0(r6)
   10f84:	003ff906 	br	10f6c <__alt_data_end+0xffff0f6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10f88:	00112700 	call	11270 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10f8c:	dfc00017 	ldw	ra,0(sp)
   10f90:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10f94:	001135c1 	jmpi	1135c <alt_icache_flush_all>
   10f98:	00c00074 	movhi	r3,1
   10f9c:	18c51104 	addi	r3,r3,5188
   10fa0:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10fa4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10fa8:	18bff726 	beq	r3,r2,10f88 <__alt_data_end+0xffff0f88>
    {
      *to++ = *from++;
   10fac:	114f883a 	add	r7,r2,r5
   10fb0:	39c00017 	ldw	r7,0(r7)
   10fb4:	110d883a 	add	r6,r2,r4
   10fb8:	10800104 	addi	r2,r2,4
   10fbc:	31c00015 	stw	r7,0(r6)
   10fc0:	003ff906 	br	10fa8 <__alt_data_end+0xffff0fa8>

00010fc4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10fc4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10fc8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10fcc:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10fd0:	00110500 	call	11050 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10fd4:	00110700 	call	11070 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10fd8:	d1a07417 	ldw	r6,-32304(gp)
   10fdc:	d1607517 	ldw	r5,-32300(gp)
   10fe0:	d1207617 	ldw	r4,-32296(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10fe4:	dfc00017 	ldw	ra,0(sp)
   10fe8:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10fec:	001036c1 	jmpi	1036c <main>

00010ff0 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10ff0:	00800044 	movi	r2,1
   10ff4:	20800226 	beq	r4,r2,11000 <write+0x10>
   10ff8:	00800084 	movi	r2,2
   10ffc:	2080041e 	bne	r4,r2,11010 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   11000:	01000074 	movhi	r4,1
   11004:	000f883a 	mov	r7,zero
   11008:	21056e04 	addi	r4,r4,5560
   1100c:	00110dc1 	jmpi	110dc <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11010:	d0a00a17 	ldw	r2,-32728(gp)
   11014:	10000926 	beq	r2,zero,1103c <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   11018:	deffff04 	addi	sp,sp,-4
   1101c:	dfc00015 	stw	ra,0(sp)
   11020:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   11024:	00c01444 	movi	r3,81
   11028:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   1102c:	00bfffc4 	movi	r2,-1
   11030:	dfc00017 	ldw	ra,0(sp)
   11034:	dec00104 	addi	sp,sp,4
   11038:	f800283a 	ret
   1103c:	d0a07204 	addi	r2,gp,-32312
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   11040:	00c01444 	movi	r3,81
   11044:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   11048:	00bfffc4 	movi	r2,-1
   1104c:	f800283a 	ret

00011050 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   11050:	deffff04 	addi	sp,sp,-4
   11054:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   11058:	00113600 	call	11360 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1105c:	00800044 	movi	r2,1
   11060:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   11064:	dfc00017 	ldw	ra,0(sp)
   11068:	dec00104 	addi	sp,sp,4
   1106c:	f800283a 	ret

00011070 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   11070:	01000074 	movhi	r4,1
   11074:	d1600604 	addi	r5,gp,-32744
   11078:	21054904 	addi	r4,r4,5412
   1107c:	001127c1 	jmpi	1127c <alt_dev_llist_insert>

00011080 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
   11080:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
   11084:	298d883a 	add	r6,r5,r6

  while (ptr < end)
   11088:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   1108c:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   11090:	11800b2e 	bgeu	r2,r6,110c0 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   11094:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   11098:	1a60000c 	andi	r9,r3,32768
   1109c:	48000326 	beq	r9,zero,110ac <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   110a0:	10c00005 	stb	r3,0(r2)
   110a4:	10800044 	addi	r2,r2,1
   110a8:	003ff906 	br	11090 <__alt_data_end+0xffff1090>
    else if (ptr != buffer)
   110ac:	11400226 	beq	r2,r5,110b8 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
   110b0:	1145c83a 	sub	r2,r2,r5
   110b4:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   110b8:	403ff526 	beq	r8,zero,11090 <__alt_data_end+0xffff1090>
   110bc:	00000106 	br	110c4 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
   110c0:	117ffb1e 	bne	r2,r5,110b0 <__alt_data_end+0xffff10b0>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   110c4:	39d0000c 	andi	r7,r7,16384
   110c8:	3800021e 	bne	r7,zero,110d4 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
   110cc:	00bffec4 	movi	r2,-5
   110d0:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   110d4:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
   110d8:	f800283a 	ret

000110dc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   110dc:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   110e0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   110e4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   110e8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   110ec:	2980072e 	bgeu	r5,r6,1110c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   110f0:	38c00037 	ldwio	r3,0(r7)
   110f4:	18ffffec 	andhi	r3,r3,65535
   110f8:	183ffc26 	beq	r3,zero,110ec <__alt_data_end+0xffff10ec>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   110fc:	28c00007 	ldb	r3,0(r5)
   11100:	20c00035 	stwio	r3,0(r4)
   11104:	29400044 	addi	r5,r5,1
   11108:	003ff806 	br	110ec <__alt_data_end+0xffff10ec>

  return count;
}
   1110c:	f800283a 	ret

00011110 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   11110:	d1600604 	addi	r5,gp,-32744
   11114:	00112e81 	jmpi	112e8 <alt_find_dev>

00011118 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   11118:	20800a17 	ldw	r2,40(r4)
   1111c:	10800023 	ldbuio	r2,0(r2)
   11120:	28800005 	stb	r2,0(r5)

	return 0;
}
   11124:	0005883a 	mov	r2,zero
   11128:	f800283a 	ret

0001112c <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1112c:	20800a17 	ldw	r2,40(r4)
   11130:	29400fcc 	andi	r5,r5,63
   11134:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11138:	20800a17 	ldw	r2,40(r4)
   1113c:	10800063 	ldbuio	r2,1(r2)
   11140:	30800005 	stb	r2,0(r6)

	return 0;
}
   11144:	0005883a 	mov	r2,zero
   11148:	f800283a 	ret

0001114c <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1114c:	20800a17 	ldw	r2,40(r4)
   11150:	29400fcc 	andi	r5,r5,63
   11154:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   11158:	20800a17 	ldw	r2,40(r4)
   1115c:	11800065 	stbio	r6,1(r2)

	return 0;
}
   11160:	0005883a 	mov	r2,zero
   11164:	f800283a 	ret

00011168 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11168:	20800a17 	ldw	r2,40(r4)
   1116c:	00c00c84 	movi	r3,50
   11170:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11174:	20800a17 	ldw	r2,40(r4)
   11178:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1117c:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11180:	10803fcc 	andi	r2,r2,255
   11184:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11188:	20800a17 	ldw	r2,40(r4)
   1118c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11190:	20800a17 	ldw	r2,40(r4)
   11194:	10800063 	ldbuio	r2,1(r2)
   11198:	10803fcc 	andi	r2,r2,255
   1119c:	1006923a 	slli	r3,r2,8
   111a0:	28800017 	ldw	r2,0(r5)
   111a4:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   111a8:	10e0000c 	andi	r3,r2,32768
   111ac:	18000126 	beq	r3,zero,111b4 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   111b0:	10bffff4 	orhi	r2,r2,65535
   111b4:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   111b8:	0005883a 	mov	r2,zero
   111bc:	f800283a 	ret

000111c0 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   111c0:	20800a17 	ldw	r2,40(r4)
   111c4:	00c00d04 	movi	r3,52
   111c8:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   111cc:	20800a17 	ldw	r2,40(r4)
   111d0:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   111d4:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   111d8:	10803fcc 	andi	r2,r2,255
   111dc:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   111e0:	20800a17 	ldw	r2,40(r4)
   111e4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   111e8:	20800a17 	ldw	r2,40(r4)
   111ec:	10800063 	ldbuio	r2,1(r2)
   111f0:	10803fcc 	andi	r2,r2,255
   111f4:	1006923a 	slli	r3,r2,8
   111f8:	28800017 	ldw	r2,0(r5)
   111fc:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   11200:	10e0000c 	andi	r3,r2,32768
   11204:	18000126 	beq	r3,zero,1120c <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   11208:	10bffff4 	orhi	r2,r2,65535
   1120c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11210:	0005883a 	mov	r2,zero
   11214:	f800283a 	ret

00011218 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11218:	20800a17 	ldw	r2,40(r4)
   1121c:	00c00d84 	movi	r3,54
   11220:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11224:	20800a17 	ldw	r2,40(r4)
   11228:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1122c:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11230:	10803fcc 	andi	r2,r2,255
   11234:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11238:	20800a17 	ldw	r2,40(r4)
   1123c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11240:	20800a17 	ldw	r2,40(r4)
   11244:	10800063 	ldbuio	r2,1(r2)
   11248:	10803fcc 	andi	r2,r2,255
   1124c:	1006923a 	slli	r3,r2,8
   11250:	28800017 	ldw	r2,0(r5)
   11254:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   11258:	10e0000c 	andi	r3,r2,32768
   1125c:	18000126 	beq	r3,zero,11264 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   11260:	10bffff4 	orhi	r2,r2,65535
   11264:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11268:	0005883a 	mov	r2,zero
   1126c:	f800283a 	ret

00011270 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11270:	f800283a 	ret

00011274 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   11274:	3005883a 	mov	r2,r6
   11278:	f800283a 	ret

0001127c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1127c:	20000226 	beq	r4,zero,11288 <alt_dev_llist_insert+0xc>
   11280:	20800217 	ldw	r2,8(r4)
   11284:	1000101e 	bne	r2,zero,112c8 <alt_dev_llist_insert+0x4c>
   11288:	d0a00a17 	ldw	r2,-32728(gp)
   1128c:	10000926 	beq	r2,zero,112b4 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11290:	deffff04 	addi	sp,sp,-4
   11294:	dfc00015 	stw	ra,0(sp)
   11298:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   1129c:	00c00584 	movi	r3,22
   112a0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   112a4:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   112a8:	dfc00017 	ldw	ra,0(sp)
   112ac:	dec00104 	addi	sp,sp,4
   112b0:	f800283a 	ret
   112b4:	d0a07204 	addi	r2,gp,-32312
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   112b8:	00c00584 	movi	r3,22
   112bc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   112c0:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   112c4:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   112c8:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   112cc:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   112d0:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   112d4:	28800017 	ldw	r2,0(r5)
   112d8:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   112dc:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   112e0:	0005883a 	mov	r2,zero
   112e4:	f800283a 	ret

000112e8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   112e8:	defffb04 	addi	sp,sp,-20
   112ec:	dcc00315 	stw	r19,12(sp)
   112f0:	dc800215 	stw	r18,8(sp)
   112f4:	dc400115 	stw	r17,4(sp)
   112f8:	dc000015 	stw	r16,0(sp)
   112fc:	dfc00415 	stw	ra,16(sp)
   11300:	2027883a 	mov	r19,r4
   11304:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   11308:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   1130c:	0010be40 	call	10be4 <strlen>
   11310:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11314:	84400726 	beq	r16,r17,11334 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11318:	81000217 	ldw	r4,8(r16)
   1131c:	900d883a 	mov	r6,r18
   11320:	980b883a 	mov	r5,r19
   11324:	00113dc0 	call	113dc <memcmp>
   11328:	10000426 	beq	r2,zero,1133c <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   1132c:	84000017 	ldw	r16,0(r16)
   11330:	003ff806 	br	11314 <__alt_data_end+0xffff1314>
  }
  
  /* No match found */
  
  return NULL;
   11334:	0005883a 	mov	r2,zero
   11338:	00000106 	br	11340 <alt_find_dev+0x58>
   1133c:	8005883a 	mov	r2,r16
}
   11340:	dfc00417 	ldw	ra,16(sp)
   11344:	dcc00317 	ldw	r19,12(sp)
   11348:	dc800217 	ldw	r18,8(sp)
   1134c:	dc400117 	ldw	r17,4(sp)
   11350:	dc000017 	ldw	r16,0(sp)
   11354:	dec00504 	addi	sp,sp,20
   11358:	f800283a 	ret

0001135c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1135c:	f800283a 	ret

00011360 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   11360:	000170fa 	wrctl	ienable,zero
   11364:	f800283a 	ret

00011368 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   11368:	213ffe84 	addi	r4,r4,-6
   1136c:	008003c4 	movi	r2,15
   11370:	11001636 	bltu	r2,r4,113cc <alt_exception_cause_generated_bad_addr+0x64>
   11374:	200890ba 	slli	r4,r4,2
   11378:	00800074 	movhi	r2,1
   1137c:	1084e304 	addi	r2,r2,5004
   11380:	2089883a 	add	r4,r4,r2
   11384:	20800017 	ldw	r2,0(r4)
   11388:	1000683a 	jmp	r2
   1138c:	000113d4 	movui	zero,1103
   11390:	000113d4 	movui	zero,1103
   11394:	000113cc 	andi	zero,zero,1103
   11398:	000113cc 	andi	zero,zero,1103
   1139c:	000113cc 	andi	zero,zero,1103
   113a0:	000113d4 	movui	zero,1103
   113a4:	000113cc 	andi	zero,zero,1103
   113a8:	000113cc 	andi	zero,zero,1103
   113ac:	000113d4 	movui	zero,1103
   113b0:	000113d4 	movui	zero,1103
   113b4:	000113cc 	andi	zero,zero,1103
   113b8:	000113d4 	movui	zero,1103
   113bc:	000113cc 	andi	zero,zero,1103
   113c0:	000113cc 	andi	zero,zero,1103
   113c4:	000113cc 	andi	zero,zero,1103
   113c8:	000113d4 	movui	zero,1103
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   113cc:	0005883a 	mov	r2,zero
   113d0:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   113d4:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   113d8:	f800283a 	ret

000113dc <memcmp>:
   113dc:	218d883a 	add	r6,r4,r6
   113e0:	21800826 	beq	r4,r6,11404 <memcmp+0x28>
   113e4:	20800003 	ldbu	r2,0(r4)
   113e8:	28c00003 	ldbu	r3,0(r5)
   113ec:	10c00226 	beq	r2,r3,113f8 <memcmp+0x1c>
   113f0:	10c5c83a 	sub	r2,r2,r3
   113f4:	f800283a 	ret
   113f8:	21000044 	addi	r4,r4,1
   113fc:	29400044 	addi	r5,r5,1
   11400:	003ff706 	br	113e0 <__alt_data_end+0xffff13e0>
   11404:	0005883a 	mov	r2,zero
   11408:	f800283a 	ret
