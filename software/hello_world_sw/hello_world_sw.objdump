
hello_world_sw.elf:     file format elf32-littlenios2
hello_world_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x0000061c memsz 0x0000061c flags r-x
    LOAD off    0x0000163c vaddr 0x0001063c paddr 0x00010640 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001644 vaddr 0x00010644 paddr 0x00010644 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  00001640  2**0
                  CONTENTS
  2 .text         00000560  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000bc  00010580  00010580  00001580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  0001063c  00010640  0000163c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00010644  00010644  00001644  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00010650  00010650  00001640  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001f0  00000000  00000000  00001668  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000011b7  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000963  00000000  00000000  00002a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000b16  00000000  00000000  00003372  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000268  00000000  00000000  00003e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000081c  00000000  00000000  000040f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007fb  00000000  00000000  0000490c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00005108  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000108  00000000  00000000  00005148  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00006196  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00006199  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000619c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000619d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000619e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000061a2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000061a6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000061aa  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000061b3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000061bc  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  000061c5  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  000061d2  2**0
                  CONTENTS, READONLY
 29 .jdi          00004b12  00000000  00000000  0000620d  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000656d8  00000000  00000000  0000ad1f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
00010580 l    d  .rodata	00000000 .rodata
0001063c l    d  .rwdata	00000000 .rwdata
00010644 l    d  .bss	00000000 .bss
00010650 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_sw_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00010230 g     F .text	0000002c alt_main
00010640 g       *ABS*	00000000 __flash_rwdata_start
0001025c g     F .text	00000038 alt_putstr
0001063c g     O .rwdata	00000004 jtag_uart
00010380 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010648 g     O .bss	00000004 alt_argv
0001863c g       *ABS*	00000000 _gp
00010294 g     F .text	00000004 usleep
0001049c g     F .text	00000064 .hidden __udivsi3
00010650 g       *ABS*	00000000 __bss_end
00010378 g     F .text	00000004 alt_dcache_flush_all
00010640 g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
0001063c g       *ABS*	00000000 __ram_rodata_end
00010500 g     F .text	00000058 .hidden __umodsi3
00010650 g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
000102bc g     F .text	00000034 altera_avalon_jtag_uart_write
00010020 g     F .text	0000003c _start
000102b8 g     F .text	00000004 alt_sys_init
00010558 g     F .text	00000028 .hidden __mulsi3
0001063c g       *ABS*	00000000 __ram_rwdata_start
00010580 g       *ABS*	00000000 __ram_rodata_start
000102f0 g     F .text	00000088 alt_busy_sleep
00010650 g       *ABS*	00000000 __alt_stack_base
00010644 g       *ABS*	00000000 __bss_start
00010068 g     F .text	000000e8 main
00010644 g     O .bss	00000004 alt_envp
000103a4 g     F .text	00000084 .hidden __divsi3
00010580 g       *ABS*	00000000 __flash_rodata_start
00010298 g     F .text	00000020 alt_irq_init
0001064c g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010640 g       *ABS*	00000000 _edata
00010650 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010428 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
00010388 g     F .text	0000001c strlen
0001005c g     F .text	0000000c load
0001037c g     F .text	00000004 alt_icache_flush_all
00010150 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a18f14 	ori	gp,gp,34364
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10819114 	ori	r2,r2,1604

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c19414 	ori	r3,r3,1616

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00101500 	call	10150 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00102300 	call	10230 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff0058>

0001005c <load>:
#include "system.h"
#include <unistd.h>

int  load(int i){
	i = i << 1;
	return i + 1;
   1005c:	2109883a 	add	r4,r4,r4

}
   10060:	20800044 	addi	r2,r4,1
   10064:	f800283a 	ret

00010068 <main>:

int main()
{
	int switch_datain;
	alt_putstr("Hello from Nios II!\n");
   10068:	01000074 	movhi	r4,1
	return i + 1;

}

int main()
{
   1006c:	defffa04 	addi	sp,sp,-24
	int switch_datain;
	alt_putstr("Hello from Nios II!\n");
   10070:	21016004 	addi	r4,r4,1408
	return i + 1;

}

int main()
{
   10074:	dfc00515 	stw	ra,20(sp)
   10078:	dcc00315 	stw	r19,12(sp)
   1007c:	dc400115 	stw	r17,4(sp)
   10080:	dd000415 	stw	r20,16(sp)
   10084:	dc800215 	stw	r18,8(sp)
   10088:	dc000015 	stw	r16,0(sp)
	int switch_datain;
	alt_putstr("Hello from Nios II!\n");
   1008c:	001025c0 	call	1025c <alt_putstr>
	alt_putstr("When you press Push Button 0,1 the switching on of the LEDs is done by software\n");
   10090:	01000074 	movhi	r4,1
   10094:	21016604 	addi	r4,r4,1432
   10098:	001025c0 	call	1025c <alt_putstr>
	alt_putstr("But, Switching on/off of LED 2 by SW 2 is done by hardware\n");
   1009c:	01000074 	movhi	r4,1
   100a0:	21017b04 	addi	r4,r4,1516
	/* Event loop never exits. Read the PB, display on the LED */

	while (1)
	{
		//Gets the data from the pb, recall that a 0 means the button is pressed
		switch_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   100a4:	04c000b4 	movhi	r19,2
   100a8:	044000b4 	movhi	r17,2
int main()
{
	int switch_datain;
	alt_putstr("Hello from Nios II!\n");
	alt_putstr("When you press Push Button 0,1 the switching on of the LEDs is done by software\n");
	alt_putstr("But, Switching on/off of LED 2 by SW 2 is done by hardware\n");
   100ac:	001025c0 	call	1025c <alt_putstr>
	/* Event loop never exits. Read the PB, display on the LED */

	while (1)
	{
		//Gets the data from the pb, recall that a 0 means the button is pressed
		switch_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   100b0:	9cc42004 	addi	r19,r19,4224
   100b4:	8c441804 	addi	r17,r17,4192
   100b8:	9c000037 	ldwio	r16,0(r19)
		//Mask the bits so the leftmost LEDs are off (we only care about LED3-0)
		switch_datain &= (0b0000000011);

		if(switch_datain == 0b01){
   100bc:	00800044 	movi	r2,1
	/* Event loop never exits. Read the PB, display on the LED */

	while (1)
	{
		//Gets the data from the pb, recall that a 0 means the button is pressed
		switch_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   100c0:	0420303a 	nor	r16,zero,r16
		//Mask the bits so the leftmost LEDs are off (we only care about LED3-0)
		switch_datain &= (0b0000000011);
   100c4:	840000cc 	andi	r16,r16,3

		if(switch_datain == 0b01){
   100c8:	80800c1e 	bne	r16,r2,100fc <main+0x94>
			alt_putstr("Loading...\n");
   100cc:	01000074 	movhi	r4,1
   100d0:	21018a04 	addi	r4,r4,1576
   100d4:	001025c0 	call	1025c <alt_putstr>
   100d8:	04800284 	movi	r18,10
			switch_datain = 1;
			for (int i = 0; i < 10; i ++){
				IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
   100dc:	8c000035 	stwio	r16,0(r17)
				switch_datain = load(switch_datain);
				usleep(500000);
   100e0:	01000234 	movhi	r4,8
#include "altera_avalon_pio_regs.h"
#include "system.h"
#include <unistd.h>

int  load(int i){
	i = i << 1;
   100e4:	8421883a 	add	r16,r16,r16
			alt_putstr("Loading...\n");
			switch_datain = 1;
			for (int i = 0; i < 10; i ++){
				IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
				switch_datain = load(switch_datain);
				usleep(500000);
   100e8:	21284804 	addi	r4,r4,-24288
   100ec:	94bfffc4 	addi	r18,r18,-1
#include "system.h"
#include <unistd.h>

int  load(int i){
	i = i << 1;
	return i + 1;
   100f0:	84000044 	addi	r16,r16,1
			alt_putstr("Loading...\n");
			switch_datain = 1;
			for (int i = 0; i < 10; i ++){
				IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
				switch_datain = load(switch_datain);
				usleep(500000);
   100f4:	00102940 	call	10294 <usleep>
		switch_datain &= (0b0000000011);

		if(switch_datain == 0b01){
			alt_putstr("Loading...\n");
			switch_datain = 1;
			for (int i = 0; i < 10; i ++){
   100f8:	903ff81e 	bne	r18,zero,100dc <__alt_data_end+0xffff00dc>
				switch_datain = load(switch_datain);
				usleep(500000);
			}
		}

		if(switch_datain == 0b10){
   100fc:	00800084 	movi	r2,2
   10100:	80800226 	beq	r16,r2,1010c <main+0xa4>
				usleep(300000);
			}
		}

		switch_datain = 0;
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
   10104:	88000035 	stwio	zero,0(r17)

	}
   10108:	003feb06 	br	100b8 <__alt_data_end+0xffff00b8>
				usleep(500000);
			}
		}

		if(switch_datain == 0b10){
			alt_putstr("Lights\n");
   1010c:	01000074 	movhi	r4,1
   10110:	21018d04 	addi	r4,r4,1588
   10114:	001025c0 	call	1025c <alt_putstr>
   10118:	04000284 	movi	r16,10
			for(int i = 0; i < 10; i++){
				switch_datain = 0b1010101010;
				IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
   1011c:	0500aa84 	movi	r20,682
				usleep(300000);
				switch_datain = 0b0101010101;
				IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
   10120:	04805544 	movi	r18,341

		if(switch_datain == 0b10){
			alt_putstr("Lights\n");
			for(int i = 0; i < 10; i++){
				switch_datain = 0b1010101010;
				IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
   10124:	8d000035 	stwio	r20,0(r17)
				usleep(300000);
   10128:	01000174 	movhi	r4,5
   1012c:	2124f804 	addi	r4,r4,-27680
   10130:	00102940 	call	10294 <usleep>
				switch_datain = 0b0101010101;
				IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE,switch_datain);
   10134:	8c800035 	stwio	r18,0(r17)
				usleep(300000);
   10138:	01000174 	movhi	r4,5
   1013c:	2124f804 	addi	r4,r4,-27680
   10140:	843fffc4 	addi	r16,r16,-1
   10144:	00102940 	call	10294 <usleep>
			}
		}

		if(switch_datain == 0b10){
			alt_putstr("Lights\n");
			for(int i = 0; i < 10; i++){
   10148:	803ff61e 	bne	r16,zero,10124 <__alt_data_end+0xffff0124>
   1014c:	003fed06 	br	10104 <__alt_data_end+0xffff0104>

00010150 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10150:	deffff04 	addi	sp,sp,-4
   10154:	01000074 	movhi	r4,1
   10158:	01400074 	movhi	r5,1
   1015c:	dfc00015 	stw	ra,0(sp)
   10160:	21018f04 	addi	r4,r4,1596
   10164:	29419004 	addi	r5,r5,1600

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10168:	2140061e 	bne	r4,r5,10184 <alt_load+0x34>
   1016c:	01000074 	movhi	r4,1
   10170:	01400074 	movhi	r5,1
   10174:	21000804 	addi	r4,r4,32
   10178:	29400804 	addi	r5,r5,32
   1017c:	2140121e 	bne	r4,r5,101c8 <alt_load+0x78>
   10180:	00000b06 	br	101b0 <alt_load+0x60>
   10184:	00c00074 	movhi	r3,1
   10188:	18c19004 	addi	r3,r3,1600
   1018c:	1907c83a 	sub	r3,r3,r4
   10190:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10194:	10fff526 	beq	r2,r3,1016c <__alt_data_end+0xffff016c>
    {
      *to++ = *from++;
   10198:	114f883a 	add	r7,r2,r5
   1019c:	39c00017 	ldw	r7,0(r7)
   101a0:	110d883a 	add	r6,r2,r4
   101a4:	10800104 	addi	r2,r2,4
   101a8:	31c00015 	stw	r7,0(r6)
   101ac:	003ff906 	br	10194 <__alt_data_end+0xffff0194>
   101b0:	01000074 	movhi	r4,1
   101b4:	01400074 	movhi	r5,1
   101b8:	21016004 	addi	r4,r4,1408
   101bc:	29416004 	addi	r5,r5,1408

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   101c0:	2140101e 	bne	r4,r5,10204 <alt_load+0xb4>
   101c4:	00000b06 	br	101f4 <alt_load+0xa4>
   101c8:	00c00074 	movhi	r3,1
   101cc:	18c00804 	addi	r3,r3,32
   101d0:	1907c83a 	sub	r3,r3,r4
   101d4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   101d8:	10fff526 	beq	r2,r3,101b0 <__alt_data_end+0xffff01b0>
    {
      *to++ = *from++;
   101dc:	114f883a 	add	r7,r2,r5
   101e0:	39c00017 	ldw	r7,0(r7)
   101e4:	110d883a 	add	r6,r2,r4
   101e8:	10800104 	addi	r2,r2,4
   101ec:	31c00015 	stw	r7,0(r6)
   101f0:	003ff906 	br	101d8 <__alt_data_end+0xffff01d8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   101f4:	00103780 	call	10378 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   101f8:	dfc00017 	ldw	ra,0(sp)
   101fc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10200:	001037c1 	jmpi	1037c <alt_icache_flush_all>
   10204:	00c00074 	movhi	r3,1
   10208:	18c18f04 	addi	r3,r3,1596
   1020c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10210:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10214:	18bff726 	beq	r3,r2,101f4 <__alt_data_end+0xffff01f4>
    {
      *to++ = *from++;
   10218:	114f883a 	add	r7,r2,r5
   1021c:	39c00017 	ldw	r7,0(r7)
   10220:	110d883a 	add	r6,r2,r4
   10224:	10800104 	addi	r2,r2,4
   10228:	31c00015 	stw	r7,0(r6)
   1022c:	003ff906 	br	10214 <__alt_data_end+0xffff0214>

00010230 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10230:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10234:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10238:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1023c:	00102980 	call	10298 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10240:	00102b80 	call	102b8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10244:	d1a00217 	ldw	r6,-32760(gp)
   10248:	d1600317 	ldw	r5,-32756(gp)
   1024c:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10250:	dfc00017 	ldw	ra,0(sp)
   10254:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10258:	00100681 	jmpi	10068 <main>

0001025c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   1025c:	defffe04 	addi	sp,sp,-8
   10260:	dc000015 	stw	r16,0(sp)
   10264:	dfc00115 	stw	ra,4(sp)
   10268:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   1026c:	00103880 	call	10388 <strlen>
   10270:	01000074 	movhi	r4,1
   10274:	000f883a 	mov	r7,zero
   10278:	100d883a 	mov	r6,r2
   1027c:	800b883a 	mov	r5,r16
   10280:	21018f04 	addi	r4,r4,1596
#else
    return fputs(str, stdout);
#endif
#endif
}
   10284:	dfc00117 	ldw	ra,4(sp)
   10288:	dc000017 	ldw	r16,0(sp)
   1028c:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10290:	00102bc1 	jmpi	102bc <altera_avalon_jtag_uart_write>

00010294 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   10294:	00102f01 	jmpi	102f0 <alt_busy_sleep>

00010298 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10298:	deffff04 	addi	sp,sp,-4
   1029c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   102a0:	00103800 	call	10380 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   102a4:	00800044 	movi	r2,1
   102a8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   102ac:	dfc00017 	ldw	ra,0(sp)
   102b0:	dec00104 	addi	sp,sp,4
   102b4:	f800283a 	ret

000102b8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   102b8:	f800283a 	ret

000102bc <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   102bc:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   102c0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   102c4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   102c8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   102cc:	2980072e 	bgeu	r5,r6,102ec <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   102d0:	38c00037 	ldwio	r3,0(r7)
   102d4:	18ffffec 	andhi	r3,r3,65535
   102d8:	183ffc26 	beq	r3,zero,102cc <__alt_data_end+0xffff02cc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   102dc:	28c00007 	ldb	r3,0(r5)
   102e0:	20c00035 	stwio	r3,0(r4)
   102e4:	29400044 	addi	r5,r5,1
   102e8:	003ff806 	br	102cc <__alt_data_end+0xffff02cc>

  return count;
}
   102ec:	f800283a 	ret

000102f0 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   102f0:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   102f4:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   102f8:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   102fc:	dc000015 	stw	r16,0(sp)
   10300:	dfc00115 	stw	ra,4(sp)
   10304:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10308:	001049c0 	call	1049c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1030c:	10001026 	beq	r2,zero,10350 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10310:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10314:	013999b4 	movhi	r4,58982
   10318:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1031c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10320:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10324:	297fffc4 	addi	r5,r5,-1
   10328:	283ffe1e 	bne	r5,zero,10324 <__alt_data_end+0xffff0324>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1032c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10330:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10334:	18bffb16 	blt	r3,r2,10324 <__alt_data_end+0xffff0324>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10338:	01400144 	movi	r5,5
   1033c:	8009883a 	mov	r4,r16
   10340:	00105580 	call	10558 <__mulsi3>
   10344:	10bfffc4 	addi	r2,r2,-1
   10348:	103ffe1e 	bne	r2,zero,10344 <__alt_data_end+0xffff0344>
   1034c:	00000506 	br	10364 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10350:	01400144 	movi	r5,5
   10354:	8009883a 	mov	r4,r16
   10358:	00105580 	call	10558 <__mulsi3>
   1035c:	10bfffc4 	addi	r2,r2,-1
   10360:	00bffe16 	blt	zero,r2,1035c <__alt_data_end+0xffff035c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   10364:	0005883a 	mov	r2,zero
   10368:	dfc00117 	ldw	ra,4(sp)
   1036c:	dc000017 	ldw	r16,0(sp)
   10370:	dec00204 	addi	sp,sp,8
   10374:	f800283a 	ret

00010378 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10378:	f800283a 	ret

0001037c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1037c:	f800283a 	ret

00010380 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10380:	000170fa 	wrctl	ienable,zero
   10384:	f800283a 	ret

00010388 <strlen>:
   10388:	2005883a 	mov	r2,r4
   1038c:	10c00007 	ldb	r3,0(r2)
   10390:	18000226 	beq	r3,zero,1039c <strlen+0x14>
   10394:	10800044 	addi	r2,r2,1
   10398:	003ffc06 	br	1038c <__alt_data_end+0xffff038c>
   1039c:	1105c83a 	sub	r2,r2,r4
   103a0:	f800283a 	ret

000103a4 <__divsi3>:
   103a4:	20001b16 	blt	r4,zero,10414 <__divsi3+0x70>
   103a8:	000f883a 	mov	r7,zero
   103ac:	28001616 	blt	r5,zero,10408 <__divsi3+0x64>
   103b0:	200d883a 	mov	r6,r4
   103b4:	29001a2e 	bgeu	r5,r4,10420 <__divsi3+0x7c>
   103b8:	00800804 	movi	r2,32
   103bc:	00c00044 	movi	r3,1
   103c0:	00000106 	br	103c8 <__divsi3+0x24>
   103c4:	10000d26 	beq	r2,zero,103fc <__divsi3+0x58>
   103c8:	294b883a 	add	r5,r5,r5
   103cc:	10bfffc4 	addi	r2,r2,-1
   103d0:	18c7883a 	add	r3,r3,r3
   103d4:	293ffb36 	bltu	r5,r4,103c4 <__alt_data_end+0xffff03c4>
   103d8:	0005883a 	mov	r2,zero
   103dc:	18000726 	beq	r3,zero,103fc <__divsi3+0x58>
   103e0:	0005883a 	mov	r2,zero
   103e4:	31400236 	bltu	r6,r5,103f0 <__divsi3+0x4c>
   103e8:	314dc83a 	sub	r6,r6,r5
   103ec:	10c4b03a 	or	r2,r2,r3
   103f0:	1806d07a 	srli	r3,r3,1
   103f4:	280ad07a 	srli	r5,r5,1
   103f8:	183ffa1e 	bne	r3,zero,103e4 <__alt_data_end+0xffff03e4>
   103fc:	38000126 	beq	r7,zero,10404 <__divsi3+0x60>
   10400:	0085c83a 	sub	r2,zero,r2
   10404:	f800283a 	ret
   10408:	014bc83a 	sub	r5,zero,r5
   1040c:	39c0005c 	xori	r7,r7,1
   10410:	003fe706 	br	103b0 <__alt_data_end+0xffff03b0>
   10414:	0109c83a 	sub	r4,zero,r4
   10418:	01c00044 	movi	r7,1
   1041c:	003fe306 	br	103ac <__alt_data_end+0xffff03ac>
   10420:	00c00044 	movi	r3,1
   10424:	003fee06 	br	103e0 <__alt_data_end+0xffff03e0>

00010428 <__modsi3>:
   10428:	20001716 	blt	r4,zero,10488 <__modsi3+0x60>
   1042c:	000f883a 	mov	r7,zero
   10430:	2005883a 	mov	r2,r4
   10434:	28001216 	blt	r5,zero,10480 <__modsi3+0x58>
   10438:	2900162e 	bgeu	r5,r4,10494 <__modsi3+0x6c>
   1043c:	01800804 	movi	r6,32
   10440:	00c00044 	movi	r3,1
   10444:	00000106 	br	1044c <__modsi3+0x24>
   10448:	30000a26 	beq	r6,zero,10474 <__modsi3+0x4c>
   1044c:	294b883a 	add	r5,r5,r5
   10450:	31bfffc4 	addi	r6,r6,-1
   10454:	18c7883a 	add	r3,r3,r3
   10458:	293ffb36 	bltu	r5,r4,10448 <__alt_data_end+0xffff0448>
   1045c:	18000526 	beq	r3,zero,10474 <__modsi3+0x4c>
   10460:	1806d07a 	srli	r3,r3,1
   10464:	11400136 	bltu	r2,r5,1046c <__modsi3+0x44>
   10468:	1145c83a 	sub	r2,r2,r5
   1046c:	280ad07a 	srli	r5,r5,1
   10470:	183ffb1e 	bne	r3,zero,10460 <__alt_data_end+0xffff0460>
   10474:	38000126 	beq	r7,zero,1047c <__modsi3+0x54>
   10478:	0085c83a 	sub	r2,zero,r2
   1047c:	f800283a 	ret
   10480:	014bc83a 	sub	r5,zero,r5
   10484:	003fec06 	br	10438 <__alt_data_end+0xffff0438>
   10488:	0109c83a 	sub	r4,zero,r4
   1048c:	01c00044 	movi	r7,1
   10490:	003fe706 	br	10430 <__alt_data_end+0xffff0430>
   10494:	00c00044 	movi	r3,1
   10498:	003ff106 	br	10460 <__alt_data_end+0xffff0460>

0001049c <__udivsi3>:
   1049c:	200d883a 	mov	r6,r4
   104a0:	2900152e 	bgeu	r5,r4,104f8 <__udivsi3+0x5c>
   104a4:	28001416 	blt	r5,zero,104f8 <__udivsi3+0x5c>
   104a8:	00800804 	movi	r2,32
   104ac:	00c00044 	movi	r3,1
   104b0:	00000206 	br	104bc <__udivsi3+0x20>
   104b4:	10000e26 	beq	r2,zero,104f0 <__udivsi3+0x54>
   104b8:	28000516 	blt	r5,zero,104d0 <__udivsi3+0x34>
   104bc:	294b883a 	add	r5,r5,r5
   104c0:	10bfffc4 	addi	r2,r2,-1
   104c4:	18c7883a 	add	r3,r3,r3
   104c8:	293ffa36 	bltu	r5,r4,104b4 <__alt_data_end+0xffff04b4>
   104cc:	18000826 	beq	r3,zero,104f0 <__udivsi3+0x54>
   104d0:	0005883a 	mov	r2,zero
   104d4:	31400236 	bltu	r6,r5,104e0 <__udivsi3+0x44>
   104d8:	314dc83a 	sub	r6,r6,r5
   104dc:	10c4b03a 	or	r2,r2,r3
   104e0:	1806d07a 	srli	r3,r3,1
   104e4:	280ad07a 	srli	r5,r5,1
   104e8:	183ffa1e 	bne	r3,zero,104d4 <__alt_data_end+0xffff04d4>
   104ec:	f800283a 	ret
   104f0:	0005883a 	mov	r2,zero
   104f4:	f800283a 	ret
   104f8:	00c00044 	movi	r3,1
   104fc:	003ff406 	br	104d0 <__alt_data_end+0xffff04d0>

00010500 <__umodsi3>:
   10500:	2005883a 	mov	r2,r4
   10504:	2900122e 	bgeu	r5,r4,10550 <__umodsi3+0x50>
   10508:	28001116 	blt	r5,zero,10550 <__umodsi3+0x50>
   1050c:	01800804 	movi	r6,32
   10510:	00c00044 	movi	r3,1
   10514:	00000206 	br	10520 <__umodsi3+0x20>
   10518:	30000c26 	beq	r6,zero,1054c <__umodsi3+0x4c>
   1051c:	28000516 	blt	r5,zero,10534 <__umodsi3+0x34>
   10520:	294b883a 	add	r5,r5,r5
   10524:	31bfffc4 	addi	r6,r6,-1
   10528:	18c7883a 	add	r3,r3,r3
   1052c:	293ffa36 	bltu	r5,r4,10518 <__alt_data_end+0xffff0518>
   10530:	18000626 	beq	r3,zero,1054c <__umodsi3+0x4c>
   10534:	1806d07a 	srli	r3,r3,1
   10538:	11400136 	bltu	r2,r5,10540 <__umodsi3+0x40>
   1053c:	1145c83a 	sub	r2,r2,r5
   10540:	280ad07a 	srli	r5,r5,1
   10544:	183ffb1e 	bne	r3,zero,10534 <__alt_data_end+0xffff0534>
   10548:	f800283a 	ret
   1054c:	f800283a 	ret
   10550:	00c00044 	movi	r3,1
   10554:	003ff706 	br	10534 <__alt_data_end+0xffff0534>

00010558 <__mulsi3>:
   10558:	0005883a 	mov	r2,zero
   1055c:	20000726 	beq	r4,zero,1057c <__mulsi3+0x24>
   10560:	20c0004c 	andi	r3,r4,1
   10564:	2008d07a 	srli	r4,r4,1
   10568:	18000126 	beq	r3,zero,10570 <__mulsi3+0x18>
   1056c:	1145883a 	add	r2,r2,r5
   10570:	294b883a 	add	r5,r5,r5
   10574:	203ffa1e 	bne	r4,zero,10560 <__alt_data_end+0xffff0560>
   10578:	f800283a 	ret
   1057c:	f800283a 	ret
