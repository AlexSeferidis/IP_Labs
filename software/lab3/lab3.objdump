
lab3.elf:     file format elf32-littlenios2
lab3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000009a0 memsz 0x000009a0 flags r-x
    LOAD off    0x000019c0 vaddr 0x000109c0 paddr 0x00010a68 align 2**12
         filesz 0x000000a8 memsz 0x000000a8 flags rw-
    LOAD off    0x00001b10 vaddr 0x00010b10 paddr 0x00010b10 align 2**12
         filesz 0x00000000 memsz 0x0000012c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000081c  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000024  0001099c  0001099c  0000199c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000a8  000109c0  00010a68  000019c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000012c  00010b10  00010b10  00001b10  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  00010c3c  00010c3c  00001a68  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000320  00000000  00000000  00001a90  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002b24  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000011a5  00000000  00000000  000048d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001288  00000000  00000000  00005a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003b0  00000000  00000000  00006d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000011bf  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006e9  00000000  00000000  00008273  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000895c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000180  00000000  00000000  00008970  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00009efa  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00009efd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00009f00  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00009f01  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00009f02  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00009f0b  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00009f14  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  00009f1d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  00009f2f  2**0
                  CONTENTS, READONLY
 26 .jdi          00005009  00000000  00000000  00009f6a  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003e15d  00000000  00000000  0000ef73  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
0001099c l    d  .rodata	00000000 .rodata
000109c0 l    d  .rwdata	00000000 .rwdata
00010b10 l    d  .bss	00000000 .bss
00010c3c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab3_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 accelerometer.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000109c0 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000107e8 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00010b34 g     O .bss	00000004 alt_instruction_exception_handler
00010610 g     F .text	0000002c alt_main
0001023c g     F .text	00000014 led_write
00010b3c g     O .bss	00000100 alt_irq
00010a68 g       *ABS*	00000000 __flash_rwdata_start
00010b2c g     O .bss	00000004 altera_avalon_timer_ts_freq
000101bc g     F .text	00000080 sys_timer_isr
00010a4c g     O .rwdata	00000004 jtag_uart
000108d4 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
000106dc g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010b38 g     O .bss	00000004 errno
00010b24 g     O .bss	00000004 alt_argv
00018a44 g       *ABS*	00000000 _gp
000109ec g     O .rwdata	00000030 alt_fd_list
0001085c g     F .text	00000074 alt_find_dev
000108dc g     F .text	00000074 alt_exception_cause_generated_bad_addr
00010a50 g     O .rwdata	00000004 alt_max_fd
0001049c g     F .text	00000094 alt_irq_register
00010c3c g       *ABS*	00000000 __bss_end
00010b1c g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
00010a1c g     O .rwdata	00000028 alt_dev_null
000107e4 g     F .text	00000004 alt_dcache_flush_all
00010a68 g       *ABS*	00000000 __ram_rwdata_end
00010284 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00010a54 g     O .rwdata	00000008 alt_dev_list
000109c0 g       *ABS*	00000000 __ram_rodata_end
00010b14 g     O .bss	00000001 led
00010c3c g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00010180 g     F .text	0000003c _start
00010b18 g     O .bss	00000004 level
0001065c g     F .text	00000028 alt_sys_init
0001068c g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00010474 g     F .text	00000028 .hidden __mulsi3
000109c0 g       *ABS*	00000000 __ram_rwdata_start
0001099c g       *ABS*	00000000 __ram_rodata_start
00010734 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
00010950 g     F .text	00000030 memcmp
00010c3c g       *ABS*	00000000 __alt_stack_base
00010a44 g     O .rwdata	00000004 TAPS
000107f0 g     F .text	0000006c alt_dev_llist_insert
00010b10 g       *ABS*	00000000 __bss_start
0001036c g     F .text	00000108 main
00010b20 g     O .bss	00000004 alt_envp
00010a64 g     O .rwdata	00000004 alt_errno
0001099c g       *ABS*	00000000 __flash_rodata_start
0001063c g     F .text	00000020 alt_irq_init
00010b28 g     O .bss	00000004 alt_argc
00010b30 g     O .bss	00000004 altera_avalon_timer_ts_base
00010020 g       .exceptions	00000000 alt_irq_entry
00010b10 g     O .bss	00000001 pwm
00010a5c g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010684 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
000102f4 g     F .text	00000078 LPF
00010a68 g       *ABS*	00000000 _edata
00010c3c g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
0001078c g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010250 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
000106a0 g     F .text	00000020 alt_up_accelerometer_spi_read
000106c0 g     F .text	0000001c alt_up_accelerometer_spi_write
00010980 g     F .text	0000001c strlen
000108d0 g     F .text	00000004 alt_icache_flush_all
00010a48 g     O .rwdata	00000004 alt_priority_mask
00010530 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	8402cf04 	addi	r16,r16,2876

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a03c17 	ldw	r2,-32528(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a29114 	ori	gp,gp,35396
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	1082c414 	ori	r2,r2,2832

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c30f14 	ori	r3,r3,3132

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00105300 	call	10530 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00106100 	call	10610 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840004 	addi	r2,r2,4096
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a03517 	ldw	r2,-32556(gp)
   101cc:	d1603307 	ldb	r5,-32564(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c40804 	addi	r3,r3,4128
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
alt_u8 led;
int level;
int TAPS = 128;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a03403 	ldbu	r2,-32560(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a03403 	ldbu	r2,-32560(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a03403 	ldbu	r2,-32560(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a03303 	ldbu	r2,-32564(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0203305 	stb	zero,-32564(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a03305 	stb	r2,-32564(gp)
   10238:	f800283a 	ret

0001023c <led_write>:
alt_u8 led;
int level;
int TAPS = 128;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   1023c:	008000b4 	movhi	r2,2
   10240:	21003fcc 	andi	r4,r4,255
   10244:	10840804 	addi	r2,r2,4128
   10248:	11000035 	stwio	r4,0(r2)
   1024c:	f800283a 	ret

00010250 <convert_read>:
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
   10250:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10254:	2005d1ba 	srai	r2,r4,6
    * level = (acc_read >> 1) & 0x1f;
   10258:	2009d07a 	srai	r4,r4,1
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   1025c:	10c001cc 	andi	r3,r2,7
   10260:	00800204 	movi	r2,8
   10264:	10cfc83a 	sub	r7,r2,r3
   10268:	11ce983a 	sll	r7,r2,r7
   1026c:	10c5d83a 	sra	r2,r2,r3
    * level = (acc_read >> 1) & 0x1f;
   10270:	210007cc 	andi	r4,r4,31
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10274:	3884b03a 	or	r2,r7,r2
   10278:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   1027c:	29000015 	stw	r4,0(r5)
   10280:	f800283a 	ret

00010284 <timer_init>:
        pwm++;
    }

}

void timer_init(void * isr) {
   10284:	defffe04 	addi	sp,sp,-8
   10288:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   1028c:	040000b4 	movhi	r16,2
        pwm++;
    }

}

void timer_init(void * isr) {
   10290:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10294:	84040104 	addi	r16,r16,4100
   10298:	008000c4 	movi	r2,3
   1029c:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   102a0:	00c000b4 	movhi	r3,2
   102a4:	0005883a 	mov	r2,zero
   102a8:	18c40004 	addi	r3,r3,4096
   102ac:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   102b0:	00c000b4 	movhi	r3,2
   102b4:	18c40204 	addi	r3,r3,4104
   102b8:	01424004 	movi	r5,2304
   102bc:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   102c0:	00c000b4 	movhi	r3,2
   102c4:	18c40304 	addi	r3,r3,4108
   102c8:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   102cc:	200d883a 	mov	r6,r4
   102d0:	000b883a 	mov	r5,zero
   102d4:	01000044 	movi	r4,1
   102d8:	001049c0 	call	1049c <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   102dc:	008001c4 	movi	r2,7
   102e0:	80800035 	stwio	r2,0(r16)

}
   102e4:	dfc00117 	ldw	ra,4(sp)
   102e8:	dc000017 	ldw	r16,0(sp)
   102ec:	dec00204 	addi	sp,sp,8
   102f0:	f800283a 	ret

000102f4 <LPF>:

alt_32 LPF(alt_32 acc_read [TAPS], alt_32 coeffs [TAPS]){
   102f4:	defffa04 	addi	sp,sp,-24
   102f8:	dd000415 	stw	r20,16(sp)
	alt_32 avg = 0;
	for (int i = 0; i < TAPS; i++){
   102fc:	d5200017 	ldw	r20,-32768(gp)
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

alt_32 LPF(alt_32 acc_read [TAPS], alt_32 coeffs [TAPS]){
   10300:	dcc00315 	stw	r19,12(sp)
   10304:	dc800215 	stw	r18,8(sp)
   10308:	dc400115 	stw	r17,4(sp)
   1030c:	dc000015 	stw	r16,0(sp)
   10310:	dfc00515 	stw	ra,20(sp)
   10314:	2025883a 	mov	r18,r4
   10318:	2827883a 	mov	r19,r5
	alt_32 avg = 0;
	for (int i = 0; i < TAPS; i++){
   1031c:	0023883a 	mov	r17,zero
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

alt_32 LPF(alt_32 acc_read [TAPS], alt_32 coeffs [TAPS]){
	alt_32 avg = 0;
   10320:	0021883a 	mov	r16,zero
	for (int i = 0; i < TAPS; i++){
   10324:	8d00080e 	bge	r17,r20,10348 <LPF+0x54>
		avg += acc_read[i]*coeffs[i];
   10328:	99400017 	ldw	r5,0(r19)
   1032c:	91000017 	ldw	r4,0(r18)

}

alt_32 LPF(alt_32 acc_read [TAPS], alt_32 coeffs [TAPS]){
	alt_32 avg = 0;
	for (int i = 0; i < TAPS; i++){
   10330:	8c400044 	addi	r17,r17,1
   10334:	94800104 	addi	r18,r18,4
		avg += acc_read[i]*coeffs[i];
   10338:	00104740 	call	10474 <__mulsi3>
   1033c:	80a1883a 	add	r16,r16,r2
   10340:	9cc00104 	addi	r19,r19,4
   10344:	003ff706 	br	10324 <__alt_data_end+0xffff0324>
	}
	//alt_printf("average data: %f\n", sum);
	return avg >> 7;
}
   10348:	8005d1fa 	srai	r2,r16,7
   1034c:	dfc00517 	ldw	ra,20(sp)
   10350:	dd000417 	ldw	r20,16(sp)
   10354:	dcc00317 	ldw	r19,12(sp)
   10358:	dc800217 	ldw	r18,8(sp)
   1035c:	dc400117 	ldw	r17,4(sp)
   10360:	dc000017 	ldw	r16,0(sp)
   10364:	dec00604 	addi	sp,sp,24
   10368:	f800283a 	ret

0001036c <main>:

int main() {
	int i = 0;
    alt_32 x_read [TAPS];
   1036c:	d0e00017 	ldw	r3,-32768(gp)
	}
	//alt_printf("average data: %f\n", sum);
	return avg >> 7;
}

int main() {
   10370:	defffa04 	addi	sp,sp,-24
   10374:	df000415 	stw	fp,16(sp)
	int i = 0;
    alt_32 x_read [TAPS];
   10378:	18c5883a 	add	r2,r3,r3
   1037c:	1085883a 	add	r2,r2,r2
   10380:	10800184 	addi	r2,r2,6
   10384:	1004d0ba 	srli	r2,r2,2
	}
	//alt_printf("average data: %f\n", sum);
	return avg >> 7;
}

int main() {
   10388:	dc800215 	stw	r18,8(sp)
   1038c:	dc400115 	stw	r17,4(sp)
	int i = 0;
    alt_32 x_read [TAPS];
   10390:	1085883a 	add	r2,r2,r2
   10394:	1085883a 	add	r2,r2,r2
	}
	//alt_printf("average data: %f\n", sum);
	return avg >> 7;
}

int main() {
   10398:	dfc00515 	stw	ra,20(sp)
   1039c:	dcc00315 	stw	r19,12(sp)
   103a0:	dc000015 	stw	r16,0(sp)
   103a4:	df000404 	addi	fp,sp,16
	int i = 0;
    alt_32 x_read [TAPS];
   103a8:	d8b7c83a 	sub	sp,sp,r2
   103ac:	d823883a 	mov	r17,sp
    alt_32 coeffs [TAPS];
   103b0:	d8b7c83a 	sub	sp,sp,r2
   103b4:	d825883a 	mov	r18,sp
   103b8:	d809883a 	mov	r4,sp
   103bc:	880b883a 	mov	r5,r17

    for (int i = 0; i<TAPS; i++){
   103c0:	0005883a 	mov	r2,zero
    	coeffs[i] = 1;
   103c4:	01800044 	movi	r6,1
int main() {
	int i = 0;
    alt_32 x_read [TAPS];
    alt_32 coeffs [TAPS];

    for (int i = 0; i<TAPS; i++){
   103c8:	10c0060e 	bge	r2,r3,103e4 <main+0x78>
    	coeffs[i] = 1;
   103cc:	21800015 	stw	r6,0(r4)
    	x_read[i] = 0;
   103d0:	28000015 	stw	zero,0(r5)
int main() {
	int i = 0;
    alt_32 x_read [TAPS];
    alt_32 coeffs [TAPS];

    for (int i = 0; i<TAPS; i++){
   103d4:	10800044 	addi	r2,r2,1
   103d8:	21000104 	addi	r4,r4,4
   103dc:	29400104 	addi	r5,r5,4
   103e0:	003ff906 	br	103c8 <__alt_data_end+0xffff03c8>
    	coeffs[i] = 1;
    	x_read[i] = 0;
    }

    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   103e4:	01000074 	movhi	r4,1
   103e8:	21026704 	addi	r4,r4,2460
   103ec:	00106840 	call	10684 <alt_up_accelerometer_spi_open_dev>
   103f0:	1027883a 	mov	r19,r2
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   103f4:	10001526 	beq	r2,zero,1044c <main+0xe0>
        return 1;
    }

    timer_init(sys_timer_isr);
   103f8:	01000074 	movhi	r4,1
   103fc:	21006f04 	addi	r4,r4,444
   10400:	00102840 	call	10284 <timer_init>
	//alt_printf("average data: %f\n", sum);
	return avg >> 7;
}

int main() {
	int i = 0;
   10404:	0021883a 	mov	r16,zero
        return 1;
    }

    timer_init(sys_timer_isr);
    while (1) {
    	if (i == TAPS){
   10408:	d0a00017 	ldw	r2,-32768(gp)
   1040c:	8080011e 	bne	r16,r2,10414 <main+0xa8>
    		i = 0;
   10410:	0021883a 	mov	r16,zero
    	}
        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read[i]);
   10414:	840b883a 	add	r5,r16,r16
   10418:	294b883a 	add	r5,r5,r5
   1041c:	894b883a 	add	r5,r17,r5
   10420:	9809883a 	mov	r4,r19
   10424:	00106dc0 	call	106dc <alt_up_accelerometer_spi_read_x_axis>
        alt_32 avg = LPF(x_read, coeffs);
   10428:	900b883a 	mov	r5,r18
   1042c:	8809883a 	mov	r4,r17
   10430:	00102f40 	call	102f4 <LPF>

         //alt_printf("raw data: %x\naverage data: %d\n", x_read, temp);
        convert_read(avg, & level, & led);
   10434:	d1a03404 	addi	r6,gp,-32560
   10438:	d1603504 	addi	r5,gp,-32556
   1043c:	1009883a 	mov	r4,r2
   10440:	00102500 	call	10250 <convert_read>
        i++;
   10444:	84000044 	addi	r16,r16,1
    }
   10448:	003fef06 	br	10408 <__alt_data_end+0xffff0408>

    return 0;
}
   1044c:	00800044 	movi	r2,1
   10450:	e6fffc04 	addi	sp,fp,-16
   10454:	dfc00517 	ldw	ra,20(sp)
   10458:	df000417 	ldw	fp,16(sp)
   1045c:	dcc00317 	ldw	r19,12(sp)
   10460:	dc800217 	ldw	r18,8(sp)
   10464:	dc400117 	ldw	r17,4(sp)
   10468:	dc000017 	ldw	r16,0(sp)
   1046c:	dec00604 	addi	sp,sp,24
   10470:	f800283a 	ret

00010474 <__mulsi3>:
   10474:	0005883a 	mov	r2,zero
   10478:	20000726 	beq	r4,zero,10498 <__mulsi3+0x24>
   1047c:	20c0004c 	andi	r3,r4,1
   10480:	2008d07a 	srli	r4,r4,1
   10484:	18000126 	beq	r3,zero,1048c <__mulsi3+0x18>
   10488:	1145883a 	add	r2,r2,r5
   1048c:	294b883a 	add	r5,r5,r5
   10490:	203ffa1e 	bne	r4,zero,1047c <__alt_data_end+0xffff047c>
   10494:	f800283a 	ret
   10498:	f800283a 	ret

0001049c <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1049c:	008007c4 	movi	r2,31
   104a0:	11002136 	bltu	r2,r4,10528 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   104a4:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   104a8:	00ffff84 	movi	r3,-2
   104ac:	38c4703a 	and	r2,r7,r3
   104b0:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   104b4:	200490fa 	slli	r2,r4,3
   104b8:	02000074 	movhi	r8,1
   104bc:	4202cf04 	addi	r8,r8,2876
   104c0:	4085883a 	add	r2,r8,r2
   104c4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   104c8:	11400115 	stw	r5,4(r2)
   104cc:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   104d0:	30000726 	beq	r6,zero,104f0 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   104d4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   104d8:	28c6703a 	and	r3,r5,r3
   104dc:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   104e0:	d0e03617 	ldw	r3,-32552(gp)
   104e4:	1104983a 	sll	r2,r2,r4
   104e8:	10c4b03a 	or	r2,r2,r3
   104ec:	00000706 	br	1050c <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   104f0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   104f4:	28c6703a 	and	r3,r5,r3
   104f8:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   104fc:	1104983a 	sll	r2,r2,r4
   10500:	d0e03617 	ldw	r3,-32552(gp)
   10504:	0084303a 	nor	r2,zero,r2
   10508:	10c4703a 	and	r2,r2,r3
   1050c:	d0a03615 	stw	r2,-32552(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10510:	d0a03617 	ldw	r2,-32552(gp)
   10514:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10518:	2801703a 	wrctl	status,r5
   1051c:	3801703a 	wrctl	status,r7
   10520:	0005883a 	mov	r2,zero
   10524:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   10528:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   1052c:	f800283a 	ret

00010530 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10530:	deffff04 	addi	sp,sp,-4
   10534:	01000074 	movhi	r4,1
   10538:	01400074 	movhi	r5,1
   1053c:	dfc00015 	stw	ra,0(sp)
   10540:	21027004 	addi	r4,r4,2496
   10544:	29429a04 	addi	r5,r5,2664

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10548:	2140061e 	bne	r4,r5,10564 <alt_load+0x34>
   1054c:	01000074 	movhi	r4,1
   10550:	01400074 	movhi	r5,1
   10554:	21000804 	addi	r4,r4,32
   10558:	29400804 	addi	r5,r5,32
   1055c:	2140121e 	bne	r4,r5,105a8 <alt_load+0x78>
   10560:	00000b06 	br	10590 <alt_load+0x60>
   10564:	00c00074 	movhi	r3,1
   10568:	18c29a04 	addi	r3,r3,2664
   1056c:	1907c83a 	sub	r3,r3,r4
   10570:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10574:	10fff526 	beq	r2,r3,1054c <__alt_data_end+0xffff054c>
    {
      *to++ = *from++;
   10578:	114f883a 	add	r7,r2,r5
   1057c:	39c00017 	ldw	r7,0(r7)
   10580:	110d883a 	add	r6,r2,r4
   10584:	10800104 	addi	r2,r2,4
   10588:	31c00015 	stw	r7,0(r6)
   1058c:	003ff906 	br	10574 <__alt_data_end+0xffff0574>
   10590:	01000074 	movhi	r4,1
   10594:	01400074 	movhi	r5,1
   10598:	21026704 	addi	r4,r4,2460
   1059c:	29426704 	addi	r5,r5,2460

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   105a0:	2140101e 	bne	r4,r5,105e4 <alt_load+0xb4>
   105a4:	00000b06 	br	105d4 <alt_load+0xa4>
   105a8:	00c00074 	movhi	r3,1
   105ac:	18c06004 	addi	r3,r3,384
   105b0:	1907c83a 	sub	r3,r3,r4
   105b4:	0005883a 	mov	r2,zero
  {
    while( to != end )
   105b8:	10fff526 	beq	r2,r3,10590 <__alt_data_end+0xffff0590>
    {
      *to++ = *from++;
   105bc:	114f883a 	add	r7,r2,r5
   105c0:	39c00017 	ldw	r7,0(r7)
   105c4:	110d883a 	add	r6,r2,r4
   105c8:	10800104 	addi	r2,r2,4
   105cc:	31c00015 	stw	r7,0(r6)
   105d0:	003ff906 	br	105b8 <__alt_data_end+0xffff05b8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   105d4:	00107e40 	call	107e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   105d8:	dfc00017 	ldw	ra,0(sp)
   105dc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   105e0:	00108d01 	jmpi	108d0 <alt_icache_flush_all>
   105e4:	00c00074 	movhi	r3,1
   105e8:	18c27004 	addi	r3,r3,2496
   105ec:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   105f0:	0005883a 	mov	r2,zero
  {
    while( to != end )
   105f4:	18bff726 	beq	r3,r2,105d4 <__alt_data_end+0xffff05d4>
    {
      *to++ = *from++;
   105f8:	114f883a 	add	r7,r2,r5
   105fc:	39c00017 	ldw	r7,0(r7)
   10600:	110d883a 	add	r6,r2,r4
   10604:	10800104 	addi	r2,r2,4
   10608:	31c00015 	stw	r7,0(r6)
   1060c:	003ff906 	br	105f4 <__alt_data_end+0xffff05f4>

00010610 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10610:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10614:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10618:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1061c:	001063c0 	call	1063c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10620:	001065c0 	call	1065c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10624:	d1a03717 	ldw	r6,-32548(gp)
   10628:	d1603817 	ldw	r5,-32544(gp)
   1062c:	d1203917 	ldw	r4,-32540(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10630:	dfc00017 	ldw	ra,0(sp)
   10634:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10638:	001036c1 	jmpi	1036c <main>

0001063c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1063c:	deffff04 	addi	sp,sp,-4
   10640:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10644:	00108d40 	call	108d4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10648:	00800044 	movi	r2,1
   1064c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10650:	dfc00017 	ldw	ra,0(sp)
   10654:	dec00104 	addi	sp,sp,4
   10658:	f800283a 	ret

0001065c <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   1065c:	008000b4 	movhi	r2,2
   10660:	10840004 	addi	r2,r2,4096
   10664:	d0a03b15 	stw	r2,-32532(gp)

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10668:	01000074 	movhi	r4,1
   1066c:	0080bef4 	movhi	r2,763
   10670:	10bc2004 	addi	r2,r2,-3968
   10674:	d1600404 	addi	r5,gp,-32752
   10678:	21027004 	addi	r4,r4,2496
   1067c:	d0a03a15 	stw	r2,-32536(gp)
   10680:	00107f01 	jmpi	107f0 <alt_dev_llist_insert>

00010684 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   10684:	d1600404 	addi	r5,gp,-32752
   10688:	001085c1 	jmpi	1085c <alt_find_dev>

0001068c <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   1068c:	20800a17 	ldw	r2,40(r4)
   10690:	10800023 	ldbuio	r2,0(r2)
   10694:	28800005 	stb	r2,0(r5)

	return 0;
}
   10698:	0005883a 	mov	r2,zero
   1069c:	f800283a 	ret

000106a0 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   106a0:	20800a17 	ldw	r2,40(r4)
   106a4:	29400fcc 	andi	r5,r5,63
   106a8:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   106ac:	20800a17 	ldw	r2,40(r4)
   106b0:	10800063 	ldbuio	r2,1(r2)
   106b4:	30800005 	stb	r2,0(r6)

	return 0;
}
   106b8:	0005883a 	mov	r2,zero
   106bc:	f800283a 	ret

000106c0 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   106c0:	20800a17 	ldw	r2,40(r4)
   106c4:	29400fcc 	andi	r5,r5,63
   106c8:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   106cc:	20800a17 	ldw	r2,40(r4)
   106d0:	11800065 	stbio	r6,1(r2)

	return 0;
}
   106d4:	0005883a 	mov	r2,zero
   106d8:	f800283a 	ret

000106dc <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   106dc:	20800a17 	ldw	r2,40(r4)
   106e0:	00c00c84 	movi	r3,50
   106e4:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   106e8:	20800a17 	ldw	r2,40(r4)
   106ec:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   106f0:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   106f4:	10803fcc 	andi	r2,r2,255
   106f8:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   106fc:	20800a17 	ldw	r2,40(r4)
   10700:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   10704:	20800a17 	ldw	r2,40(r4)
   10708:	10800063 	ldbuio	r2,1(r2)
   1070c:	10803fcc 	andi	r2,r2,255
   10710:	1006923a 	slli	r3,r2,8
   10714:	28800017 	ldw	r2,0(r5)
   10718:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   1071c:	10e0000c 	andi	r3,r2,32768
   10720:	18000126 	beq	r3,zero,10728 <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   10724:	10bffff4 	orhi	r2,r2,65535
   10728:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   1072c:	0005883a 	mov	r2,zero
   10730:	f800283a 	ret

00010734 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10734:	20800a17 	ldw	r2,40(r4)
   10738:	00c00d04 	movi	r3,52
   1073c:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10740:	20800a17 	ldw	r2,40(r4)
   10744:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10748:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1074c:	10803fcc 	andi	r2,r2,255
   10750:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   10754:	20800a17 	ldw	r2,40(r4)
   10758:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   1075c:	20800a17 	ldw	r2,40(r4)
   10760:	10800063 	ldbuio	r2,1(r2)
   10764:	10803fcc 	andi	r2,r2,255
   10768:	1006923a 	slli	r3,r2,8
   1076c:	28800017 	ldw	r2,0(r5)
   10770:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   10774:	10e0000c 	andi	r3,r2,32768
   10778:	18000126 	beq	r3,zero,10780 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   1077c:	10bffff4 	orhi	r2,r2,65535
   10780:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   10784:	0005883a 	mov	r2,zero
   10788:	f800283a 	ret

0001078c <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   1078c:	20800a17 	ldw	r2,40(r4)
   10790:	00c00d84 	movi	r3,54
   10794:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   10798:	20800a17 	ldw	r2,40(r4)
   1079c:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   107a0:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   107a4:	10803fcc 	andi	r2,r2,255
   107a8:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   107ac:	20800a17 	ldw	r2,40(r4)
   107b0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   107b4:	20800a17 	ldw	r2,40(r4)
   107b8:	10800063 	ldbuio	r2,1(r2)
   107bc:	10803fcc 	andi	r2,r2,255
   107c0:	1006923a 	slli	r3,r2,8
   107c4:	28800017 	ldw	r2,0(r5)
   107c8:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   107cc:	10e0000c 	andi	r3,r2,32768
   107d0:	18000126 	beq	r3,zero,107d8 <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   107d4:	10bffff4 	orhi	r2,r2,65535
   107d8:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   107dc:	0005883a 	mov	r2,zero
   107e0:	f800283a 	ret

000107e4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   107e4:	f800283a 	ret

000107e8 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   107e8:	3005883a 	mov	r2,r6
   107ec:	f800283a 	ret

000107f0 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   107f0:	20000226 	beq	r4,zero,107fc <alt_dev_llist_insert+0xc>
   107f4:	20800217 	ldw	r2,8(r4)
   107f8:	1000101e 	bne	r2,zero,1083c <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   107fc:	d0a00817 	ldw	r2,-32736(gp)
   10800:	10000926 	beq	r2,zero,10828 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10804:	deffff04 	addi	sp,sp,-4
   10808:	dfc00015 	stw	ra,0(sp)
   1080c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10810:	00c00584 	movi	r3,22
   10814:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   10818:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   1081c:	dfc00017 	ldw	ra,0(sp)
   10820:	dec00104 	addi	sp,sp,4
   10824:	f800283a 	ret
   10828:	d0a03d04 	addi	r2,gp,-32524
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   1082c:	00c00584 	movi	r3,22
   10830:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   10834:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10838:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   1083c:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10840:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   10844:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   10848:	28800017 	ldw	r2,0(r5)
   1084c:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   10850:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   10854:	0005883a 	mov	r2,zero
   10858:	f800283a 	ret

0001085c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1085c:	defffb04 	addi	sp,sp,-20
   10860:	dcc00315 	stw	r19,12(sp)
   10864:	dc800215 	stw	r18,8(sp)
   10868:	dc400115 	stw	r17,4(sp)
   1086c:	dc000015 	stw	r16,0(sp)
   10870:	dfc00415 	stw	ra,16(sp)
   10874:	2027883a 	mov	r19,r4
   10878:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   1087c:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   10880:	00109800 	call	10980 <strlen>
   10884:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10888:	84400726 	beq	r16,r17,108a8 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1088c:	81000217 	ldw	r4,8(r16)
   10890:	900d883a 	mov	r6,r18
   10894:	980b883a 	mov	r5,r19
   10898:	00109500 	call	10950 <memcmp>
   1089c:	10000426 	beq	r2,zero,108b0 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   108a0:	84000017 	ldw	r16,0(r16)
   108a4:	003ff806 	br	10888 <__alt_data_end+0xffff0888>
  }
  
  /* No match found */
  
  return NULL;
   108a8:	0005883a 	mov	r2,zero
   108ac:	00000106 	br	108b4 <alt_find_dev+0x58>
   108b0:	8005883a 	mov	r2,r16
}
   108b4:	dfc00417 	ldw	ra,16(sp)
   108b8:	dcc00317 	ldw	r19,12(sp)
   108bc:	dc800217 	ldw	r18,8(sp)
   108c0:	dc400117 	ldw	r17,4(sp)
   108c4:	dc000017 	ldw	r16,0(sp)
   108c8:	dec00504 	addi	sp,sp,20
   108cc:	f800283a 	ret

000108d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   108d0:	f800283a 	ret

000108d4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   108d4:	000170fa 	wrctl	ienable,zero
   108d8:	f800283a 	ret

000108dc <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   108dc:	213ffe84 	addi	r4,r4,-6
   108e0:	008003c4 	movi	r2,15
   108e4:	11001636 	bltu	r2,r4,10940 <alt_exception_cause_generated_bad_addr+0x64>
   108e8:	200890ba 	slli	r4,r4,2
   108ec:	00800074 	movhi	r2,1
   108f0:	10824004 	addi	r2,r2,2304
   108f4:	2089883a 	add	r4,r4,r2
   108f8:	20800017 	ldw	r2,0(r4)
   108fc:	1000683a 	jmp	r2
   10900:	00010948 	cmpgei	zero,zero,1061
   10904:	00010948 	cmpgei	zero,zero,1061
   10908:	00010940 	call	1094 <__alt_mem_onchip_memory-0xef6c>
   1090c:	00010940 	call	1094 <__alt_mem_onchip_memory-0xef6c>
   10910:	00010940 	call	1094 <__alt_mem_onchip_memory-0xef6c>
   10914:	00010948 	cmpgei	zero,zero,1061
   10918:	00010940 	call	1094 <__alt_mem_onchip_memory-0xef6c>
   1091c:	00010940 	call	1094 <__alt_mem_onchip_memory-0xef6c>
   10920:	00010948 	cmpgei	zero,zero,1061
   10924:	00010948 	cmpgei	zero,zero,1061
   10928:	00010940 	call	1094 <__alt_mem_onchip_memory-0xef6c>
   1092c:	00010948 	cmpgei	zero,zero,1061
   10930:	00010940 	call	1094 <__alt_mem_onchip_memory-0xef6c>
   10934:	00010940 	call	1094 <__alt_mem_onchip_memory-0xef6c>
   10938:	00010940 	call	1094 <__alt_mem_onchip_memory-0xef6c>
   1093c:	00010948 	cmpgei	zero,zero,1061
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10940:	0005883a 	mov	r2,zero
   10944:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10948:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   1094c:	f800283a 	ret

00010950 <memcmp>:
   10950:	218d883a 	add	r6,r4,r6
   10954:	21800826 	beq	r4,r6,10978 <memcmp+0x28>
   10958:	20800003 	ldbu	r2,0(r4)
   1095c:	28c00003 	ldbu	r3,0(r5)
   10960:	10c00226 	beq	r2,r3,1096c <memcmp+0x1c>
   10964:	10c5c83a 	sub	r2,r2,r3
   10968:	f800283a 	ret
   1096c:	21000044 	addi	r4,r4,1
   10970:	29400044 	addi	r5,r5,1
   10974:	003ff706 	br	10954 <__alt_data_end+0xffff0954>
   10978:	0005883a 	mov	r2,zero
   1097c:	f800283a 	ret

00010980 <strlen>:
   10980:	2005883a 	mov	r2,r4
   10984:	10c00007 	ldb	r3,0(r2)
   10988:	18000226 	beq	r3,zero,10994 <strlen+0x14>
   1098c:	10800044 	addi	r2,r2,1
   10990:	003ffc06 	br	10984 <__alt_data_end+0xffff0984>
   10994:	1105c83a 	sub	r2,r2,r4
   10998:	f800283a 	ret
